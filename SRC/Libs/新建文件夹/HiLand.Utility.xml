<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HiLand.Utility</name>
    </assembly>
    <members>
        <member name="M:HiLand.Utility.Algorithm.AlgorithmMisc.GetPercent(System.Double,System.Double)">
            <summary>
            获取百分比值（去掉百分号后的数字）
            </summary>
            <param name="currentValue"></param>
            <param name="totalValue"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Algorithm.DirtyWordsFilter.HashFilter">
            <summary>
            哈希过滤方式
            </summary>
        </member>
        <member name="T:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter">
            <summary>
            脏词过滤接口
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter.AddKey(System.String)">
            <summary>
            添加待过滤的脏词
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter.HasDirtyWord(System.String)">
            <summary>
            是否存在脏词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter.FindOne(System.String)">
            <summary>
            获取一个脏词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter.FindAll(System.String)">
            <summary>
            获取所以脏词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter.Replace(System.String)">
            <summary>
            替换脏词
            </summary>
            <param name="text"></param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.IWordFilter.Replace(System.String,System.Char)">
            <summary>
            替换脏词
            </summary>
            <param name="text"></param>
            <param name="mask">用于代替非法字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.HashFilter.AddKey(System.String)">
            <summary>
            插入新的Key.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.HashFilter.HasDirtyWord(System.String)">
            <summary>
            检查是否包含非法字符
            </summary>
            <param name="text">输入文本</param>
            <returns>找到的第1个非法字符.没有则返回string.Empty</returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.HashFilter.FindOne(System.String)">
            <summary>
            检查是否包含非法字符
            </summary>
            <param name="text">输入文本</param>
            <returns>找到的第1个非法字符.没有则返回string.Empty</returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.HashFilter.Replace(System.String)">
            <summary>
            替换非法字符
            </summary>
            <param name="text"></param>
            <param name="c">用于代替非法字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.DirtyWordsFilter.HashFilter.Replace(System.String,System.Char)">
            <summary>
            替换非法字符
            </summary>
            <param name="text"></param>
            <param name="c">用于代替非法字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="T:HiLand.Utility.Algorithm.DirtyWordsFilter.HashHelpers">
            <summary>
            hash运算辅助器（从.net 编译出来的.）
            </summary>
            <remarks>
            这是一个内部类型
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Algorithm.DirtyWordsFilter.HashStringSet">
            <summary>
            参考了MONO的HashSet,针对字符串进行优化
            增加了检查部分字符串的方法,可避免字符分割带来的GC问题
            Contains(String item, int offset, int len)
            </summary>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Levenshtein">
            <summary>
            编辑距离算法(计算两个文档的相似度)
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Levenshtein.EditDistance``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <SUMMARY>Computes the Levenshtein Edit Distance between two enumerables.</SUMMARY>
            <TYPEPARAM name="T">The type of the items in the enumerables.</TYPEPARAM>
            <PARAM name="x">The first enumerable.</PARAM>
            <PARAM name="y">The second enumerable.</PARAM>
            <RETURNS>The edit distance.</RETURNS>
        </member>
        <member name="T:HiLand.Utility.Algorithm.OddEven">
            <summary>
            判断一个整数是奇数还是偶数。
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.OddEven.IsEven(System.Int32)">
            <summary>
            是否为偶数
            </summary>
            <param name="i">参数</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.OddEven.IsOdd(System.Int32)">
            <summary>
            是否为奇数
            </summary>
            <param name="i">参数</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sorts`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sorts`1.ShellSort(`0[])">
            <summary>
            希尔排序 
            </summary>
            <param name="arr">待排序的数组</param>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.CountingSorter">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.CountingSorter.CountingSort(System.Int32[],System.Int32)">
            <summary>
            counting sort
            </summary>
            <param name="arrayA">input array</param>
            <param name="arrange">the value arrange in input array</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.EbullitionSorter">
            <summary>
            冒泡排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.EbullitionSorter.Sort(System.Int32[])">
            <summary>
            冒泡排序
            </summary>
            <param name="arr">需要排序的数组</param>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.HeapSorter.HeapSort(System.Double[]@)">
            <summary>
            小根堆排序
            </summary>
            <param name="dblArray"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.HeapSorter.NodeSort(System.Double[]@,System.Int32)">
            <summary>
            节点排序
            </summary>
            <param name="dblArray"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.HeapSorter.ExchageValue(System.Double@,System.Double@)">
            <summary>
            交换值
            </summary>
            <param name="A"></param>
            <param name="B"></param>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.InsertionSorter">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.InsertionSorter.Sort(System.Int32[])">
            <summary>
            插入排序
            </summary>
            <param name="arr">待排序的数组</param>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.MergeSorter">
            <summary>
            归并排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.MergeSorter.Sort(System.Int32[])">
            <summary>
            归并排序之归：归并排序入口
            </summary>
            <param name="data">无序的数组</param>
            <returns>有序数组</returns>
            <author>Lihua(www.zivsoft.com)</author>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.MergeSorter.Merge(System.Int32[],System.Int32[])">
            <summary>
            归并排序之并:排序在这一步
            </summary>
            <param name="a">左数组</param>
            <param name="b">右数组</param>
            <returns>合并左右数组排序后返回</returns>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.QuickSorter">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.QuickSorter.Sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            快速排序
            </summary>
            <param name="list">待排序的数组</param>
            <param name="low"></param>
            <param name="high"></param>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.RadixSorter">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.RadixSorter.RadixSort(System.Int32[],System.Int32)">
            <summary>
            基数排序
            </summary>
            <param name="ArrayToSort"></param>
            <param name="digit"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Algorithm.Sort.SelectionSorter">
            <summary>
            选择排序
            </summary>
        </member>
        <member name="M:HiLand.Utility.Algorithm.Sort.SelectionSorter.Sort(System.Int32[])">
            <summary>
            选择排序
            </summary>
            <param name="arr">需要排序的数组</param>
        </member>
        <member name="M:HiLand.Utility.AOP.Interceptor.EmptyObjectInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            EmptyObject模式的动态代理拦截器
            </summary>
            <param name="invocation"></param>
            <remarks>
            由于很多对空模式的处理都没有涉及到有返回值的方法,本逻辑亦未能处理(如果一个方法有返回值就直接调用远对象的方法)
            但是,对于没有返回值的方法,本逻辑进行了拦截,拦截后不处理任何事情.
            (关于空模式的具体使用方法请参考本目录下的reamde.txt文件中的demo)
            </remarks>
        </member>
        <member name="T:HiLand.Utility.AOP.CodePacking">
            <summary>
            代码包装工具类
            </summary>
        </member>
        <member name="M:HiLand.Utility.AOP.CodePacking.Try``1(``0,System.Action{``0})">
            <summary>
            将代码包装进Try语句块中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="action"></param>
        </member>
        <member name="M:HiLand.Utility.AOP.CodePacking.Try``1(``0,System.Action{``0},System.Action{``0})">
            <summary>
            将代码包装进Try/Finally语句块中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="tryAction"></param>
            <param name="finallyAction"></param>
        </member>
        <member name="M:HiLand.Utility.AOP.CodePacking.Try``2(``0,HiLand.Utility.Event.Funcs{``0,``1})">
            <summary>
            将代码包装进Try语句块中
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.AOP.CodePacking.Try``3(``0,``1,HiLand.Utility.Event.Funcs{``0,``1,``2})">
            <summary>
            将代码包装进Try语句块中
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.AOP.CodePacking.Try``2(``0,HiLand.Utility.Event.Funcs{``0,``1},HiLand.Utility.Event.Funcs{``0,``1})">
            <summary>
            将代码包装进Try/Finally语句块中
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t"></param>
            <param name="tryAction"></param>
            <param name="finallyAction"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.AOP.CodePacking.Using``1(System.Action{``0})">
            <summary>
            将代码包装进Using语句块中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
        </member>
        <member name="T:HiLand.Utility.Attributes.EnumItemIsDisplayInListAttribute">
            <summary>
            枚举项是否允许出现在列表中
            </summary>
        </member>
        <member name="M:HiLand.Utility.Attributes.EnumItemIsDisplayInListAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isDisplayInList">枚举项是否允许出现在列表中</param>
        </member>
        <member name="P:HiLand.Utility.Attributes.EnumItemIsDisplayInListAttribute.IsDisplayInList">
            <summary>
            枚举项是否允许出现在列表中
            </summary>
        </member>
        <member name="T:HiLand.Utility.Attributes.NonCopyMember">
            <summary>
            类型的非拷贝成员
            </summary>
            <remarks>
            两个（同类型）实体之间拷贝数据的时候，不传递的成员需要标注此特性
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Cache.CacheFactory">
            <summary>
            缓存实例工厂
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheFactory.Create">
            <summary>
            创建ICache的具体实例
            </summary>
            <returns></returns>
            <remarks>
            如果引入自定义的缓存系统（此自定义缓存系统必须实现接口ICache），
            请配置节点cacheClassType
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Cache.CacheHelper">
            <summary>
            缓存应用辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Access``1(System.String,System.Int32,HiLand.Utility.Event.Funcs{``0})">
            <summary>
            对象获取（首先从缓存池内获取，如果获取不到那么会调用func方法）
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheSeconds"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Access``2(System.String,System.Int32,HiLand.Utility.Event.Funcs{``0,``1},``0)">
            <summary>
            对象获取（首先从缓存池内获取，如果获取不到那么会调用func方法）
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheSeconds"></param>
            <param name="func"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Access``3(System.String,System.Int32,HiLand.Utility.Event.Funcs{``0,``1,``2},``0,``1)">
            <summary>
            对象获取（首先从缓存池内获取，如果获取不到那么会调用func方法）
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheSeconds"></param>
            <param name="func"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Access``4(System.String,System.Int32,HiLand.Utility.Event.Funcs{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            对象获取（首先从缓存池内获取，如果获取不到那么会调用func方法）
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheSeconds"></param>
            <param name="func"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Access``5(System.String,System.Int32,HiLand.Utility.Event.Funcs{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            对象获取（首先从缓存池内获取，如果获取不到那么会调用func方法）
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheSeconds"></param>
            <param name="func"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Access``6(System.String,System.Int32,HiLand.Utility.Event.Funcs{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            对象获取（首先从缓存池内获取，如果获取不到那么会调用func方法）
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey"></param>
            <param name="cacheSeconds"></param>
            <param name="func"></param>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <param name="t4"></param>
            <param name="t5"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Set(System.String,System.Object,System.Int32)">
            <summary>
            在缓存池中加入缓冲对象
            </summary>
            <param name="cacheKey">缓冲对象的Key</param>
            <param name="cachedObject">缓冲对象实体</param>
            <param name="cacheSeconds">缓冲对象的时间（秒为单位）</param>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.Remove(System.String)">
            <summary>
            在缓存池中移除缓冲对象
            </summary>
            <param name="cacheKey">缓冲对象的Key</param>
        </member>
        <member name="M:HiLand.Utility.Cache.CacheHelper.RemoveByPattern(System.String)">
            <summary>
            在缓存池中按照缓存键匹配的方式移除缓冲对象
            </summary>
            <param name="cacheKeyPattern">缓存键匹配的模式字符串</param>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheHelper.OneMintue">
            <summary>
            缓存常量（一分钟）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheHelper.TenMintues">
            <summary>
            缓存常量（十分钟）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheHelper.OneHour">
            <summary>
            缓存常量（一小时）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheHelper.MaxMintues">
            <summary>
            缓存常量（最大缓冲时间）
            </summary>
        </member>
        <member name="P:HiLand.Utility.Cache.CacheHelper.IsUseCache">
            <summary>
            是否启用缓存
            </summary>
        </member>
        <member name="P:HiLand.Utility.Cache.CacheHelper.AFewTime">
            <summary>
            这个地方使用配置，允许开发人员在config中配置这个具体的缓存时间（单位为分钟；如果不配置其缺省为1分钟）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityKeyFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字；{2}：表示实体的主键值
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityPropertyFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字；{2}：表示属性的名字；{3}：表示属性的值
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityPrefixFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityListPrefixFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityCountFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字；{2}：表示Where过滤条件
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityListFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字；{2}:OnlyDisplayUsable；{3}:WhereClause；{4}:TopCount；{5}:OrderByClause
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityPageCollectionFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字；{2}:StartIndex；{3}:EndIndex；{4}:WhereClause；{5}:OrderByClause
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.CacheKeys.EntityScalarFormat">
            <summary>
            {0}:表示模块的名字；{1}：表示实体的名字；{2}：表示Sql语句
            </summary>
        </member>
        <member name="T:HiLand.Utility.Cache.CoreCacheKeys">
            <summary>
            缓存在系统中以字典的形式保存
            </summary>
            <remarks>
            缓存键的规则为{0}-{1}-{2}-{3}...
            其中0级为最高级，其他序号级别依次向下
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetCoreKey">
            <summary>
            核心功能
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetApplicationKey(System.Guid)">
            <summary>
            插件功能
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetApplicationKey(System.String)">
            <summary>
            插件功能
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetUserPrefixKey">
            <summary>
            用户的缓存前缀（包括用户实体，用户列表等）
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetUserListPrefixKey">
            <summary>
            得到用户列表的缓存前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetUserRolesByGuidKey(System.Guid)">
            <summary>
            用户所属角色的缓存键
            </summary>
            <param name="userGuid"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetUserBrowseHistoryKey(System.String)">
            <summary>
            获取用户浏览历史的key
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetRoleUsersByGuidKey(System.Guid)">
            <summary>
            角色内的用户的缓存键
            </summary>
            <param name="roleGuid"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.CoreCacheKeys.GetRoleUsersByNameKey(System.String)">
            <summary>
            角色内的用户的缓存键
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Insert(System.String,System.Object)">
            <summary>
            插入值
            </summary>
            <param name="key">key</param>
            <param name="o">值</param>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Insert(System.String,System.Object,System.Int32)">
            <summary>
            插入值
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Max(System.String,System.Object)">
            <summary>
            最大时间缓存
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Remove(System.String)">
            <summary>
            移除值
            </summary>
            <param name="key">key</param>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.RemoveByPattern(System.String)">
            <summary>
            按照规则移除缓存
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Clear">
            <summary>
            清除所有信息
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Get(System.String)">
            <summary>
            获得值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.ICache.Get``1(System.String)">
            <summary>
             获得值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Cache.ICache.Item(System.String)">
            <summary>
            获得值
            </summary>
            <param name="key">键值</param>
            <returns>返回值</returns>
        </member>
        <member name="P:HiLand.Utility.Cache.ICache.Count">
            <summary>
            获得使用缓存总数
            </summary>
        </member>
        <member name="F:HiLand.Utility.Cache.WebCache.DayFactor">
            <summary>
            CacheDependency 说明
            如果您向 Cache 中添加某个具有依赖项的项，当依赖项更改时，
            该项将自动从 Cache 中删除。例如，假设您向 Cache 中添加某项，
            并使其依赖于文件名数组。当该数组中的某个文件更改时，
            与该数组关联的项将从缓存中删除。
            [C#] 
            Insert the cache item.
            CacheDependency dep = new CacheDependency(fileName, dt);
            cache.Insert("key", "value", dep);
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Clear">
            <summary>
            一次性清除所有缓存
            </summary>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.RemoveByPattern(System.String)">
            <summary>
            按照匹配模式移除缓存信息
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Remove(System.String)">
            <summary>
            清除特定的缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Insert(System.String,System.Object)">
            <summary>
            缓存OBJECT. 
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            缓存obj 并建立依赖项
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Insert(System.String,System.Object,System.Int32)">
            <summary>
            按秒缓存对象
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Insert(System.String,System.Object,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            按秒缓存对象 并存储优先级
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32)">
            <summary>
            按秒缓存对象 并建立依赖项
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>
            按秒缓存对象 并建立具有优先级的依赖项
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
            <param name="seconds"></param>
            <param name="priority"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Max(System.String,System.Object)">
            <summary>
            最大时间缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Max(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            具有依赖项的最大时间缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Permanent(System.String,System.Object)">
            <summary>
            Insert an item into the cache for the Maximum allowed time
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Permanent(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="dep"></param>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Cache.WebCache.SecondFactorCalculate(System.Int32)">
            <summary>
            Return int of seconds * SecondFactor
            </summary>
        </member>
        <member name="P:HiLand.Utility.Cache.WebCache.Instance">
            <summary>
            单件模式
            </summary>
        </member>
        <member name="P:HiLand.Utility.Cache.WebCache.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Cache.WebCache.Count">
            <summary>
            获取缓存池中缓存对象的数量
            </summary>
        </member>
        <member name="T:HiLand.Utility.Controls.ControlUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:HiLand.Utility.Controls.ControlUtil.TitledAndTrimedSpan(System.String,System.Int32,System.String)">
            <summary>
            将内容截取前N个字符，并用带title提示的span标签显示
            </summary>
            <param name="text"></param>
            <param name="remainCharCount"></param>
            <param name="postFixAdded"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Controls.ControlUtil.TitledAndTrimedSpan(System.String,System.Int32)">
            <summary>
            将内容截取前N个字符，并用带title提示的span标签显示
            </summary>
            <param name="text"></param>
            <param name="remainCharCount"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Core.EnvironmentHelper">
            <summary>
            系统环境操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Core.EnvironmentHelper.GetApplictionMode">
            <summary>
            获取当前运行的系统是Web模式还是Windows模式
            </summary>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Core.EnvironmentHelper.IsWebApplicatonMode">
            <summary>
            判定当前运行的系统是Web模式还是Windows模式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Core.ApplicationModes">
            <summary>
            当前运行的系统是Web模式还是Windows模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Core.ApplicationModes.NativeApp">
            <summary>
            本地应用
            </summary>
        </member>
        <member name="F:HiLand.Utility.Core.ApplicationModes.WebApp">
            <summary>
            Web应用
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.ClauseModel`1">
            <summary>
            SQL语句实体
            </summary>
        </member>
        <member name="M:HiLand.Utility.DataBase.ClauseModel`1.Combine(HiLand.Utility.DataBase.ClauseModel{`0})">
            <summary>
            将当前条件跟其他条件进行合并
            </summary>
            <param name="anotherClauseModel"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.ClauseModel`1.Combine(HiLand.Utility.DataBase.ClauseModel{`0}[])">
            <summary>
            将多个条件进行合并
            </summary>
            <param name="clauseModels"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.DataBase.ClauseModel`1.CluaseString">
            <summary>
            语句（可以带参数）
            </summary>
        </member>
        <member name="P:HiLand.Utility.DataBase.ClauseModel`1.ParameterList">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.CommonHelper`5">
            <summary>
            通用的数据访问类（兼容各个数据库类型）
            </summary>
            <typeparam name="THelper"></typeparam>
            <typeparam name="TTransaction"></typeparam>
            <typeparam name="TConnection"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TDataReader"></typeparam>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.GetConnectionString(System.String)">
            <summary>
            获取某个指定名称的数据库连接字符串
            </summary>
            <param name="connectionStringName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteNonQuery(`1,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteNonQuery(`0,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) using an existing SQL Transaction 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="trans">an existing sql transaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteNonQuery(`0,`1,System.Data.CommandType,System.String,`4[])">
            <summary>
            
            </summary>
            <param name="trans"></param>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteReader(System.String,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteReader(`1,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteScalar(System.String,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteScalar(`1,System.Data.CommandType,System.String,`4[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.IsExist(`1,System.Data.CommandType,System.String,`4[])">
            <summary>
            判断某信息在数据库内是否存在
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandTextForLineCount">命令内容,其应该是这样的sql语句
                select count(1) from [CoreUser] where [UserEmail]=@UserEmail
                即内部是要返回数据的行数的sql语句
            </param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.IsExist(System.String,System.Data.CommandType,System.String,`4[])">
            <summary>
            判断某信息在数据库内是否存在
            </summary>
            <param name="connectionString"></param>
            <param name="commandType"></param>
            <param name="commandTextForLineCount">命令内容,其应该是这样的sql语句
                select count(1) from [CoreUser] where [UserEmail]=@UserEmail
                即内部是要返回数据的行数的sql语句
            </param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteSingleRowNonQuery(`1,System.Data.CommandType,System.String,`4[])">
            <summary>
            执行影响数据库单行的sql语句,并返回执行成功与否的标识
            </summary>
            <param name="singleRowCommandText">影响数据库单行的sql语句</param>
            <param name="commandParameters"></param>
            <param name="commandType"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.ExecuteSingleRowNonQuery(System.String,System.Data.CommandType,System.String,`4[])">
            <summary>
            执行影响数据库单行的sql语句,并返回执行成功与否的标识
            </summary>
            <param name="singleRowCommandText">影响数据库单行的sql语句</param>
            <param name="commandParameters"></param>
            <param name="commandType"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.CacheParameters(System.String,`4[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelper`5.PrepareCommand(`2,`1,`0,System.Data.CommandType,System.String,`4[])">
            <summary>
            Prepare a command for execution
            </summary>
            <param name="command">SqlCommand object</param>
            <param name="connection">SqlConnection object</param>
            <param name="trans">SqlTransaction object</param>
            <param name="commandType">Cmd type e.g. stored procedure or text</param>
            <param name="commandText">Command text, e.g. Select * from Products</param>
            <param name="commandParams">SqlParameters to use in the command</param>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonHelper`5.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonHelper`5.ConnectionString">
            <summary>
            获取缺省的数据库连接字符串
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.CommonHelperEx`5">
            <summary>
            数据库执行逻辑包装器
            </summary>
            <typeparam name="TTransaction"></typeparam>
            <typeparam name="TConnection"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TDataReader"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <remarks>
            目前仅将连接包装了
            </remarks>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelperEx`5.ExecuteNonQuery(System.String,`4[])">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelperEx`5.ExecuteReader(System.String,`4[])">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelperEx`5.ExecuteReaderBySP(System.String,`4[])">
            <summary>
            通过存储过程执行Reader
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelperEx`5.ExecuteScalar(System.String,`4[])">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelperEx`5.IsExist(System.String,`4[])">
            <summary>
            
            </summary>
            <param name="commandTextForLineCount"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonHelperEx`5.ExecuteSingleRowNonQuery(System.String,`4[])">
            <summary>
            执行影响数据库单行的sql语句,并返回执行成功与否的标识(安全模式下，即不抛出异常)
            </summary>
            <param name="singleRowCommandText">影响数据库单行的sql语句</param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonHelperEx`5.HelperInstance">
            <summary>
            数据库访问辅助器单例
            </summary>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonHelperEx`5.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonHelperEx`5.ConnectionString">
            <summary>
            数据库连接信息
            </summary>
        </member>
        <member name="F:HiLand.Utility.DataBase.CPQuery.isAutoDiscoverParameters">
            <summary>
            是否在传入的字符串中自动查找参数
            </summary>
        </member>
        <member name="F:HiLand.Utility.DataBase.CPQuery.parameterNamePrefix">
            <summary>
            参数名称前缀
            </summary>
            <remarks>
            在不同的数据库系统中，参数名称的前缀是不同的：SQLServer中为 “@”；SQLite中为“$”
            </remarks>
        </member>
        <member name="M:HiLand.Utility.DataBase.CPQuery.BindToCommand(System.Data.IDbCommand@)">
            <summary>
            将拼接的字符串形成带参数的命令
            </summary>
            <param name="command">数据库访问命令</param>
            <remarks>
            此方法执行完成后，命令内部携带参数
            </remarks>
        </member>
        <member name="T:HiLand.Utility.DataBase.CPQuery.SPStep">
            <summary>
            字符串参数的处理进度
            </summary>
        </member>
        <member name="F:HiLand.Utility.DataBase.CPQuery.SPStep.NotSet">
            <summary>
            没开始或者已完成一次字符串参数的拼接
            </summary>
        </member>
        <member name="F:HiLand.Utility.DataBase.CPQuery.SPStep.EndWith">
            <summary>
            拼接时遇到一个单引号结束
            </summary>
        </member>
        <member name="F:HiLand.Utility.DataBase.CPQuery.SPStep.Skip">
            <summary>
             已跳过一次拼接
            </summary>
        </member>
        <member name="M:HiLand.Utility.DataBase.DataReaderHelper.IsExistField(System.Data.IDataReader,System.String)">
            <summary>
            判定某个字段在IDataReader中是否存在
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.DataReaderHelper.IsExistFieldAndNotNull(System.Data.IDataReader,System.String)">
            <summary>
            判定某个字段在IDataReader中是否存在，并且其值不为null
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.DataReaderHelper.GetFiledValue``1(System.Data.IDataReader,System.String)">
            <summary>
            获取IDataReader中的某个字段的值，如果不存在此字段或者值为null那么返回T的缺省值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.DataRowHelper.IsExistField(System.Data.DataRow,System.String)">
            <summary>
            判断某个字段在DataRow中是否存在
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.DataRowHelper.IsExistFieldAndNotNull(System.Data.DataRow,System.String)">
            <summary>
            判断某个字段在DataRow中是否存在,并且其值不为null
            </summary>
            <param name="row"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.DataRowHelper.GetFiledValue``1(System.Data.DataRow,System.String)">
            <summary>
            获取DataRow中的某个字段的值，如果不存在此字段或者值为null那么返回T的缺省值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.GetTotalCount(System.String,System.String)">
            <summary>
            获取总的条目
            </summary>
            <param name="whereClause">过滤条件</param>
            <param name="tableName">要查询的表名</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.GetEntity``1(System.String,`4[],HiLand.Utility.Event.Funcs{System.Data.IDataReader,``0})">
            <summary>
            通过Command语句获取数据库内的一条记录，然后从该记录装载业务实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="sqlParas"></param>
            <param name="loadEntityFunction">通过IDataReader组装业务实体的方法</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.GetEntityList``1(System.String,`4[],HiLand.Utility.Event.Funcs{System.Data.IDataReader,``0})">
            <summary>
            通过Command语句获取数据库内符合条件的记录，然后从这些记录装载业务实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="sqlParas"></param>
            <param name="loadEntityFunction">通过IDataReader组装业务实体的方法</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.GetPagedCollection``1(System.String,System.String,System.String,System.Int32,System.Int32,HiLand.Utility.Event.Funcs{System.Data.IDataReader,``0})">
            <summary>
            获取分页显示的实体数据（注：其所依赖的存储过程是有特定要求的，包括参数的名称等）
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="whereClause"></param>
            <param name="orderClause"></param>
            <param name="loadEntityFunction">通过IDataReader组装业务实体的方法</param>
            <param name="pagingSPName">能够有分页功能的存储过程的名称</param>
            <returns></returns>
            <remarks>
            1.其所依赖的存储过程参数要求如下（参数名称必须如下）
            (@startIndex INT, 
            @endindex INT,
            @whereClause Nvarchar(512)= NULL,
            @orderClause Nvarchar(200)=NULL
            )
            2.此存储过程返回2个结果集：第一个是某页要显示的数据，第二个是符合条件的总的记录数
            </remarks>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.GetPagedCollection``1(System.String,System.Int32,System.Int32,System.String,System.String,HiLand.Utility.Event.Funcs{System.Data.IDataReader,``0})">
            <summary>
            获取分页显示的实体数据（注：其所依赖的存储过程是有特定要求的，包括参数的名称等）
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="whereClause"></param>
            <param name="orderClause"></param>
            <param name="loadEntityFunction">通过IDataReader组装业务实体的方法</param>
            <param name="pagingSPName">能够有分页功能的存储过程的名称</param>
            <returns></returns>
            <remarks>
            1.其所依赖的存储过程参数要求如下（参数名称必须如下）
            (@startIndex INT, 
            @endindex INT,
            @whereClause Nvarchar(512)= NULL,
            @orderClause Nvarchar(200)=NULL
            )
            2.此存储过程返回2个结果集：第一个是某页要显示的数据，第二个是符合条件的总的记录数
            </remarks>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.PrepareParameterPaging(System.Int32,System.Int32)">
            <summary>
            为分页的存储过程准备参数
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.PrepareParameterPaging(System.Int32,System.Int32,System.String)">
            <summary>
            为分页的存储过程准备参数
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.PrepareParameterPaging(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            为分页的存储过程准备参数
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.CommonGeneral`5.PrepareParameterCount(System.String)">
            <summary>
            准备过滤条件参数
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonGeneral`5.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:HiLand.Utility.DataBase.CommonGeneral`5.HelperExInstance">
            <summary>
            数据库访问辅助器扩展单例
            </summary>
        </member>
        <member name="M:HiLand.Utility.DataBase.SqlDataBaseHelper.ConvertToType(System.Data.SqlDbType)">
            <summary>
            将sql数据库数据类型转换为dotnet的数据类型
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.SqlDataBaseHelper.ConvertToSqlDbType(System.String)">
            <summary>
            将DbType类型字符串表达方式对应映射到SqlDbType类型
            </summary>
            <param name="dbType">DbType类型字符串表达类型</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.SqlDataBaseHelper.ConvertToDbType(System.String)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="dbType">DbType类型字符串表达类型</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.DataBase.SqlGeneral">
            <summary>
            常用的SQL执行逻辑
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.SqlHelper">
            <summary>
            MS Sql Server 数据库类型访问帮助器
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.SqlHelperEx">
            <summary>
            SqlHelper包装器
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.SQLiteHelper">
            <summary>
            SQLite 数据库类型访问帮助器
            </summary>
        </member>
        <member name="T:HiLand.Utility.DataBase.SqlMisc">
            <summary>
            数据库语句杂项
            </summary>
        </member>
        <member name="M:HiLand.Utility.DataBase.SqlMisc.GenerateParameter``2(System.String,``1)">
            <summary>
            通过名称和值构建数据查询参数
            </summary>
            <typeparam name="TParameter">参数的类型</typeparam>
            <typeparam name="T">参数值的类型</typeparam>
            <param name="parameterName">参数名称</param>
            <param name="parameterValue">参数值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.SqlMisc.GenerateParameter``2(System.String,System.String,``1)">
            <summary>
            通过名称和值构建数据查询参数
            </summary>
            <typeparam name="TParameter">参数的类型</typeparam>
            <typeparam name="T">参数值的类型</typeparam>
            <param name="parameterNamePrefix">参数名称前缀</param>
            <param name="parameterName">参数名称</param>
            <param name="parameterValue">参数值</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.DataBase.WhereClauseBuilder`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.AppendCondition(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.AppendCondition(System.String,System.String,HiLand.Utility.Enums.CompareModes)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.AppendCondition``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.AppendCondition``1(System.String,``0,HiLand.Utility.Enums.CompareModes)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.GetClause">
            <summary>
            
            </summary>
            <param name="dataBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.DataBase.WhereClauseBuilder`1.GetClause(HiLand.Utility.Enums.ConditionItemRelationships)">
            <summary>
            
            </summary>
            <param name="dataBaseType"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.AssemblyHelper">
            <summary>
            应用程序集操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.AssemblyHelper.GetCompiledTime(System.Reflection.Assembly)">
            <summary>
            获取程序集的编译时间
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <remarks>
            如果要正确获取程序集的编译时间，则必须设置如下格式的信息[assembly: AssemblyVersion("1.0.*")]
            即版本的最后两位使用*标示。（通常情况下版本的格式为[assembly: AssemblyVersion("1.0.0.0")]）
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Data.CollectionHelper">
            <summary>
            集合类型操作辅助器
            </summary>
            <remarks>
            此类中的方法仅为dotnet2提供快捷操作方法，在dotnet4中请使用IEnumerable的扩展方法
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.CollectionHelper.IsExistAtLeastOneElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断两个集合中是否存在至少一个共同的元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection1"></param>
            <param name="collection2"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HiLand.Utility.Data.CollectionHelper.IsExist``1(``0,System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:HiLand.Utility.Data.CollectionHelper.IsExist``1(``0,``0[])">
            <summary>
            判断某个值，在给定的集合中是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="targetValue"></param>
            <param name="collection"></param>
            <returns></returns>
            <remarks>在dotnet4中，直接请直接使用IEnumerable的扩展方法Contains</remarks>
        </member>
        <member name="M:HiLand.Utility.Data.CollectionHelper.Merger``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将两个字典中的内容合并后返回
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="originalData"></param>
            <param name="addedData"></param>
            <returns></returns>
            <remarks>
            如果两个字典中有相同的项目，则用addedData中项的值覆盖originalData中项的值
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.CollectionHelper.Merger``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            将两个字典中的内容合并后返回
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="originalData"></param>
            <param name="addedData"></param>
            <param name="isCoverSameOriginalItem">如果两个字典中有相同的项目，是否使用addedData中项的值覆盖originalData中项的值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.CollectionHelper.Concat``1(System.String,``0[])">
            <summary>
            连接数组中的各个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seperator">连接时的分割符</param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.CollectionHelper.Concat``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            连接可枚举集合中的各个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seperator">连接时的分割符</param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.CollectionHelper.Concat``1(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            连接可枚举集合中的各个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seperator">连接时的分割符</param>
            <param name="itemPostfix">元素的后置字符串</param>
            <param name="itemPrefix">元素的前置字符串</param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.CompressHelper">
            <summary>
            压缩解压帮助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.CompressHelper.Compress(System.String)">
            <summary>
            对字符串进行压缩(压缩完成后进行base64转码)
            </summary>
            <param name="data">待压缩的字符串</param>
            <returns>压缩后的字符串(已经过base64转码)</returns>
        </member>
        <member name="M:HiLand.Utility.Data.CompressHelper.Decompress(System.String)">
            <summary>
            对字符串进行解压缩
            </summary>
            <param name="data">待解压缩的字符串</param>
            <returns>解压缩后的字符串</returns>
        </member>
        <member name="M:HiLand.Utility.Data.CompressHelper.Compress(System.String,System.String)">
            <summary>
            对文件进行压缩
            </summary>
            <param name="sourceFile">待压缩的文件名</param>
            <param name="destinationFile">压缩后的文件名</param>
        </member>
        <member name="M:HiLand.Utility.Data.CompressHelper.Decompress(System.String,System.String)">
            <summary>
            对文件进行解压缩
            </summary>
            <param name="sourceFile">待解压缩的文件名</param>
            <param name="destinationFile">解压缩后的文件名</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.CompressHelper.Compress(System.Byte[])">
            <summary>
            对byte数组进行压缩
            </summary>
            <param name="data">待压缩的byte数组</param>
            <returns>压缩后的byte数组</returns>
        </member>
        <member name="M:HiLand.Utility.Data.CompressHelper.Decompress(System.Byte[])">
            <summary>
            对byte数组进行解压
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.Converter">
            <summary>
            数据类型转换器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ChangeType(System.Object,System.Type)">
            <summary>
            对系统Convert.ChangeType方法进行扩展（其可以对可空值类型进行转换）
            </summary>
            <param name="data"></param>
            <param name="conversionType"></param>
            <returns></returns>
            <remarks>当使用系统Convert.ChangeType方法进行可空值类型进行转换的时候，会抛出异常。本扩展解决了这个问题。</remarks>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ChangeType(System.Object,System.Type,System.Object)">
            <summary>
            对系统Convert.ChangeType方法进行扩展（其可以对可空值类型进行转换）
            </summary>
            <param name="data"></param>
            <param name="conversionType"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <remarks>当使用系统Convert.ChangeType方法进行可空值类型进行转换的时候，会抛出异常。本扩展解决了这个问题。</remarks>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ChangeType``1(System.Object)">
            <summary>
            对系统Convert.ChangeType方法进行扩展（其可以对可空值类型进行转换,并且使用泛型的方式调用更方便）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ChangeType``1(System.Object,``0)">
            <summary>
            对系统Convert.ChangeType方法进行扩展（其可以对可空值类型进行转换,并且使用泛型的方式调用更方便）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ConvertBase(System.String,HiLand.Utility.Enums.NumberBase,HiLand.Utility.Enums.NumberBase)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="data">要转换的值,即原值</param>
            <param name="fromBase">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="toBase">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="data">要转换的值,即原值</param>
            <param name="fromBase">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="toBase">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToInt32(System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToBoolean(HiLand.Utility.Enums.Logics)">
            <summary>
            将Logics枚举项转换成布尔值
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToChineseString(System.Boolean)">
            <summary>
            将布尔值转换为中文显示
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToChineseString(System.Boolean,System.String)">
            <summary>
            将布尔值转换为中文显示
            </summary>
            <param name="data"></param>
            <param name="displaySerialName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToEnum``1(System.String)">
            <summary>
            将某个枚举项的字符串值转化成其对应的枚举类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumItemValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToEnum``1(System.String)">
            <summary>
            将某个枚举项的字符串值转化成其对应的枚举类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumItemValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToEnum``1(System.String,``0)">
            <summary>
            将某个枚举项的字符串值转化成其对应的枚举类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumItemValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToEnum(System.Type,System.String)">
            <summary>
            将某个枚举项的字符串值转化成其对应的枚举类型
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumItemValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToBoolean(System.String)">
            <summary>
            将字符串类型的bool值转换成bool类型
            </summary>
            <param name="data">字符串类型的bool值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToBoolean(System.String,System.Boolean)">
            <summary>
            将字符串类型的bool值转换成bool类型
            </summary>
            <param name="data">字符串类型的bool值</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToInt32(System.String)">
            <summary>
            将字符串类型的数字转换成数字类型
            </summary>
            <param name="data">字符串类型的数字</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToInt32(System.String,System.Int32)">
            <summary>
            将字符串类型的数字转换成数字类型
            </summary>
            <param name="data">字符串类型的数字</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDecimal(System.String)">
            <summary>
            将字符串类型的Decimal转换成Decimal类型
            </summary>
            <param name="data">字符串类型的Decimal</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDecimal(System.String,System.Decimal)">
            <summary>
            将字符串类型的Decimal转换成Decimal类型
            </summary>
            <param name="data">字符串类型的Decimal</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDouble(System.String)">
            <summary>
            将字符串类型的Double转换成Double类型
            </summary>
            <param name="data">字符串类型的Double</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDouble(System.String,System.Double)">
            <summary>
            将字符串类型的Double转换成Double类型
            </summary>
            <param name="data">字符串类型的Double</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToSingle(System.String)">
            <summary>
            将字符串类型的Single转换成Single类型
            </summary>
            <param name="data">字符串类型的Single</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToSingle(System.String,System.Single)">
            <summary>
            将字符串类型的Single转换成Single类型
            </summary>
            <param name="data">字符串类型的Single</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDateTime(System.String)">
            <summary>
            将字符串类型的DateTime转换成DateTime类型
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDateTime(System.String,System.DateTime)">
            <summary>
            将字符串类型的DateTime转换成DateTime类型
            </summary>
            <param name="data"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToDateTime(System.String,System.DateTime,HiLand.Utility.Enums.DateFormats)">
            <summary>
            将字符串类型的DateTime转换成DateTime类型
            </summary>
            <param name="data"></param>
            <param name="defaultValue"></param>
            <param name="dateFormat"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToBytes(System.Object)">
            <summary>
            将对象转换为字节数组
            </summary>
            <param name="objectToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.ToObject(System.Byte[])">
            <summary>
            将字节数组转换为对象
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.InheritedEntityConvert``2(``0)">
            <summary>
            有继承关系的基类实例向派生类实例的强制转换（主要为有继承关系的实体类型之间的转换）
            </summary>
            <typeparam name="TBase">基类类型</typeparam>
            <typeparam name="TDeriver">派生类类型</typeparam>
            <param name="baseInstance">基类实例</param>
            <returns>派生类实例</returns>
        </member>
        <member name="M:HiLand.Utility.Data.Converter.TryToGuid(System.String)">
            <summary>
            将字符串转换成Guid
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HiLand.Utility.Data.Converter.ToList``1(System.Data.DataTable)" -->
        <member name="T:HiLand.Utility.Data.EnumHelper">
            <summary>
            枚举操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetDisplayValue``1(``0)">
            <summary>
             获取某个枚举项上通过贴加上Attribute的内容
            </summary>
            <param name="data">枚举项</param>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns>某个枚举项上通过贴加上Attribute的内容</returns>
            <remarks>
             这个在枚举项上贴加的Attitude必须是EnumItemDescriptionAttribute类型
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetDisplayValue``1(``0,System.String)">
            <summary>
             获取某个枚举项上通过贴加上Attribute的内容
            </summary>
            <param name="data">枚举项</param>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="displayTextCategory">显示哪个类别的文本描述信息.</param>
            <returns>某个枚举项上通过贴加上Attribute的内容</returns>
            <remarks>
             这个在枚举项上贴加的Attitude必须是EnumItemDescriptionAttribute类型
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetDisplayValue(System.Object,System.Type)">
            <summary>
             获取某个枚举项上通过贴加上Attribute的内容
            </summary>
            <param name="data">枚举项</param>
            <param name="enumType">枚举类型</param>
            <returns>某个枚举项上通过贴加上Attribute的内容</returns>
            <remarks>
             这个在枚举项上贴加的Attitude必须是EnumItemDescriptionAttribute类型
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetDisplayValue(System.Object,System.Type,System.String)">
            <summary>
             获取某个枚举项上通过贴加上Attribute的内容
            </summary>
            <param name="data">枚举项</param>
            <param name="enumType">枚举类型</param>
            <param name="displayTextCategory">显示哪个类别的文本描述信息.</param>
            <returns>某个枚举项上通过贴加上Attribute的内容</returns>
            <remarks>
             这个在枚举项上贴加的Attitude必须是EnumItemDescriptionAttribute类型
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetItem``1(System.String)">
            <summary>
            从显示的友好名称获取枚举项
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="displayValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetItem``1(System.String,System.String)">
            <summary>
            从显示的友好名称获取枚举项
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="displayValue"></param>
            <param name="displayTextCategory"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.EnumHelper.GetItem``1(System.String,System.String,``0)">
            <summary>
            从显示的友好名称获取枚举项
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="displayValue"></param>
            <param name="displayTextCategory"></param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.ExceptionHelper">
            <summary>
            异常操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.ExceptionHelper.GetExceptionMessage(System.Exception)">
            <summary>
            得到异常的消息串，主要获得了StackTrace属性
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.ExceptionHelper.GetExceptionMessage(System.Exception,System.Boolean)">
            <summary>
            得到异常的消息串，主要获得了StackTrace属性
            </summary>
            <param name="e"></param>
            <param name="showAllMessage">是否显示所有错误信息</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.FlagHelper">
            <summary>
            Flag类型的数据操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.FlagHelper.ContainsFlag(System.Int32,System.Int32)">
            <summary>
            判断某一个flag类型的枚举值，是否在一个给定的枚举集合内
            </summary>
            <param name="flaggedItem"></param>
            <param name="flaggedCollection"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.FlagHelper.AddFlag(System.Int32,System.Int32)">
            <summary>
            向flag类型的枚举集合中添加某个flag枚举项目
            </summary>
            <param name="flaggedCollection"></param>
            <param name="flaggedItem"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.FlagHelper.RemoveFlag(System.Int32,System.Int32)">
            <summary>
            向flag类型的枚举集合中添加某个flag枚举项目
            </summary>
            <param name="flaggedCollection"></param>
            <param name="flaggedItem"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.FlagHelper.ContainsFlag``1(``0,``0)">
            <summary>
            判断某一个flag类型的枚举值，是否在一个给定的枚举集合内
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="flaggedItem"></param>
            <param name="flaggedCollection"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.FlagHelper.AddFlag``1(``0,``0)">
            <summary>
            向flag类型的枚举集合中添加某个flag枚举项目
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="flaggedCollection"></param>
            <param name="flaggedItem"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.FlagHelper.RemoveFlag``1(``0,``0)">
            <summary>
            向flag类型的枚举集合中添加某个flag枚举项目
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="flaggedCollection"></param>
            <param name="flaggedItem"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.GuidHelper">
            <summary>
            Guid操作辅助类
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.GuidHelper.EmptyString">
            <summary>
            空Guid字符串
            </summary>
            <remarks>
            此处之所以声明为常量，是因为其可以在方法参数的缺省值中使用
            </remarks>
        </member>
        <member name="F:HiLand.Utility.Data.GuidHelper.SystemKeyString">
            <summary>
            系统保留Guid字符串（使用场景：比如系统发送的自动消息，发送人就可以指定为此值）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.GuidHelper.SystemKey">
            <summary>
            系统保留Guid（使用场景：比如系统发送的自动消息，发送人就可以指定为此值）
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.GuidHelper.NewGuid">
            <summary>
            生成按时间排序后的Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.GuidHelper.NewGuidString">
            <summary>
            生成按时间排序后的Guid字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.GuidHelper.TryConvert(System.String)">
            <summary>
            将字符串转换成Guid
            </summary>
            <param name="data">待转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.GuidHelper.TryConvert(System.String,System.Guid)">
            <summary>
            将字符串转换成Guid
            </summary>
            <param name="value">待转换的字符串</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.GuidHelper.IsInvalidOrEmpty(System.String)">
            <summary>
            判断字符串是否为空的guid内容，或者为无效的guid值
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Data.GuidHelper.Empty">
            <summary>
            空Guid
            </summary>
        </member>
        <member name="T:HiLand.Utility.Data.HtmlHelper">
            <summary>
            HTML操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.HtmlHelper.StripHTML(System.String)">
            <summary>
            清除文本中的html标签
            </summary>
            <param name="htmlText"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.HtmlHelper.StripHTML(System.String,System.Boolean)">
            <summary>
            清除文本中的html标签
            </summary>
            <param name="htmlText"></param>
            <param name="isRetainSpace">是否在原来标签的地方保留空格</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.HtmlHelper.StripHTML(System.String,System.Boolean,System.Boolean)">
            <summary>
            清除文本中的html标签
            </summary>
            <param name="htmlText"></param>
            <param name="isRetainSpace">是否在原来标签的地方保留空格</param>
            <param name="isRemoveMisc">是否移除JS，Style等信息</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.HtmlHelper.ConvertPlainTextToHtml(System.String)">
            <summary>
            将文本文件中的换行替换为HTML中的换行（主要用于在网页上显示由textarea产生的内容）
            </summary>
            <param name="data">传入文本字符串</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.HtmlHelper.ConvertHtmlToPlainText(System.String)">
            <summary>
            将HTML中的换行替换为文本文件中的换行
            </summary>
            <param name="data">传入HTML字符串</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.JsonHelper">
            <summary>
            JSON数据操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.JsonHelper.Serialize(System.Object)">
            <summary>
            获取某一个对象的JSON格式字符串
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.JsonHelper.DeSerialize``1(System.String)">
            <summary>
            从某对象的JSON格式字符串获取其实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonValue"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.DateTimeHelper">
            <summary>
            日期操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.GetFirstDateOfMonth(System.DateTime)">
            <summary>
            取某月的第一天
            </summary>
            <param name="value">传入时间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.GetLastDateOfMonth(System.DateTime)">
            <summary>
            取某月的最后一天
            </summary>
            <param name="value">传入时间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.GetFirstDateOfQuarter(System.DateTime)">
            <summary>
            取某季度的第一天
            </summary>
            <param name="value">传入时间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.GetLastDateOfQuarter(System.DateTime)">
            <summary>
            取某季度的最后一天
            </summary>
            <param name="value">传入时间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.GetFirstDateOfYear(System.DateTime)">
            <summary>
            取某年的第一天
            </summary>
            <param name="value">传入时间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.GetLastDateOfYear(System.DateTime)">
            <summary>
            取某年的最后一天
            </summary>
            <param name="value">传入时间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.Parse(System.String,HiLand.Utility.Enums.DateFormats,System.String[])">
            <summary>
            将日期字符串解析成具体的日期
            </summary>
            <param name="dateString">日期字符串</param>
            <param name="dateFormat">日期格式</param>
            <param name="dateSeperator">日期各个部分之间的分割符号</param>
            <returns>返回解析后的日期，如果解析失败则返回系统的最小日期</returns>
            <remarks>
            对于通常日期的格式解析请使用系统自身的 DateTime.TryParser("",IFormatProvider)。
            在某些无法使用以上方法的时候才考虑使用本方法。
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.Parse(System.String,HiLand.Utility.Enums.DateFormats,System.DateTime,System.String[])">
            <summary>
            将日期字符串解析成具体的日期
            </summary>
            <param name="dateString">日期字符串</param>
            <param name="dateFormat">日期格式</param>
            <param name="dateSeperator">日期各个部分之间的分割符号</param>
            <param name="defaultValue">解析失败时返回的默认日期</param>
            <returns>返回解析后的日期，如果解析失败则返回设定的默认日期defaultValue</returns>
            <remarks>
            对于通常日期的格式解析请使用系统自身的 DateTime.TryParser("",IFormatProvider)。
            在某些无法使用以上方法的时候才考虑使用本方法。
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.UnParse(System.DateTime,HiLand.Utility.Enums.DateFormats,System.String)">
            <summary>
            将具体的日期转换成目标格式的日期字符串
            </summary>
            <param name="dateValue"></param>
            <param name="dateFormat"></param>
            <param name="dateSeperator">日期各个部分之间的分割符号</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.ToSaftShortDateString(System.DateTime)">
            <summary>
            获取安全的字符串显示
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.DateTimeHelper.ToSaftString(System.DateTime,System.String)">
            <summary>
            获取安全的字符串显示
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Data.DateTimeHelper.Min">
            <summary>
            最小日期（在Sql类型的数据中最小的日期）
            </summary>
        </member>
        <member name="P:HiLand.Utility.Data.DateTimeHelper.Max">
            <summary>
            最大日期（在Sql类型的数据中最大的日期）
            </summary>
        </member>
        <member name="P:HiLand.Utility.Data.DateTimeHelper.TimeZoneDiff">
            <summary>
            本地时间跟服务器的时差
            </summary>
        </member>
        <member name="P:HiLand.Utility.Data.DateTimeHelper.RunningLocalNow">
            <summary>
            主运营地区的当地时间
            </summary>
        </member>
        <member name="P:HiLand.Utility.Data.DateTimeHelper.RunningLocalToday">
            <summary>
            主运营地区的当地日期
            </summary>
        </member>
        <member name="T:HiLand.Utility.Data.ObjectHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.ObjectHelper.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:HiLand.Utility.Data.ObjectHelper.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="T:HiLand.Utility.Data.ProxyClassHelper">
            <summary>
            代理类操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.ProxyClassHelper.GetEmpty``1">
            <summary>
            获取空实体对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.RegexHelper">
            <summary>
            正则表达式操作辅助类
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.IPFormat">
            <summary>
            IP格式匹配字符串
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.EmailFormat">
            <summary>
            Email格式匹配字符串
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.ChineseCharFormat">
            <summary>
            匹配中文字符
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.DoubleByteCharFormat">
            <summary>
            匹配双字节字符(包括汉字在内)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.WhiteSpaceRowFormat">
            <summary>
            匹配空白行
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.HtmlTagFormat">
            <summary>
            匹配HTML标记
            </summary>
            <remarks>
            网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力
            </remarks>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.WhiteSpaceCharOnBeginAndEndFormat">
            <summary>
            匹配首尾空白字符(包括空格、制表符、换页符等等)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.UrlFormat">
            <summary>
            匹配网址URL
            </summary>
            <remarks>
            网上流传的版本功能很有限，上面这个基本可以满足需求
            </remarks>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.AccountFormat">
            <summary>
            匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)
            </summary>
            <remarks>
            使用时，请根据具体的场景需求，进行调整
            </remarks>
        </member>
        <member name="F:HiLand.Utility.Data.RegexHelper.PostCodeFormat">
            <summary>
            中国邮政编码
            </summary>
        </member>
        <member name="T:HiLand.Utility.Data.RegionData`1">
            <summary>
            表示区间的数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:HiLand.Utility.Data.RegionData`1.Min">
            <summary>
            区间内最小值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Data.RegionData`1.Max">
            <summary>
            区间内最大值
            </summary>
        </member>
        <member name="T:HiLand.Utility.Data.RegionHelper">
            <summary>
            区间使用辅助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.RegionHelper.HasOverlap``1(HiLand.Utility.Data.RegionData{``0},HiLand.Utility.Data.RegionData{``0})">
            <summary>
            判断两个区间是否有重叠部分
            </summary>
            <typeparam name="T"></typeparam>
            <param name="regionDataA"></param>
            <param name="regionDataB"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.TypeHelper">
            <summary>
            类型操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.Activate``1(System.String)">
            <summary>
            根据类型描述通过反射技术获取指定类型的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeDescription"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.Activate``1(System.Type)">
            <summary>
            根据类型描述通过反射技术获取指定类型的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.GetTypeShortDescription``1">
            <summary>
            获取类型带Assembly信息的名称，主要用于反射（其中Assembly名称中不包括版本，语言等信息）
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.GetTypeShortDescription(System.Type)">
            <summary>
            获取类型带Assembly信息的名称，主要用于反射（其中Assembly名称中不包括版本，语言等信息）
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.ConfirmIsSimpleType``1">
            <summary>
            判断类型是否为简单数据类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.ConfirmIsSimpleType(System.Type)">
            <summary>
            判断类型是否为简单数据类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.ConfirmIsNumberType``1">
            <summary>
            判断给定的类型是否为数字类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.ConfirmIsNumberType(System.Type)">
            <summary>
            判断给定的类型是否为数字类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.ConfirmIsStringType(System.Type)">
            <summary>
            判断给定的类型是否为字符串类型类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.GetFriendlyValue(System.Object)">
            <summary>
            获取数据友好的显示值
            </summary>
            <param name="data">请必须为简单类型，如果为负责类型其将返回此类型的ToString信息</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.TypeHelper.GetFriendlyValue(System.Object,System.String)">
            <summary>
            获取数据友好的显示值
            </summary>
            <param name="data">请必须为简单类型，如果为负责类型其将返回此类型的ToString信息</param>
            <param name="addon">
            对data操作的修正信息，格式为 datetime:yyyy/MM/dd||enum:zh-CN
            1、对DateTime类型，此修正信息为日期格式字符串，默认为“yyyy/MM/dd”
            2、对Enum类型，此修正信息为DisplayCategory，默认值为zh-CN
            </param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Data.XmlHelper">
            <summary>
            XML操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue(System.Xml.XmlNode)">
            <summary>
            获取某一节点的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String)">
            <summary>
            获取某一节点的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <param name="xpath">XPath查找路径</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取某一个节点中属性的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <param name="xpath">XPath查找路径</param>
            <param name="attributeName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue``1(System.Xml.XmlNode,System.String)">
            <summary>
            获取某一个节点中属性的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <param name="xpath">XPath查找路径</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            获取某一个节点中属性的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <param name="xpath">XPath查找路径</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue``1(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取某一个节点中属性的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <param name="xpath">XPath查找路径</param>
            <param name="attributeName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.GetNodeValue``1(System.Xml.XmlNode,System.String,System.String,``0)">
            <summary>
            获取某一个节点中属性的值
            </summary>
            <param name="xmlNode">Xml节点</param>
            <param name="xpath">XPath查找路径</param>
            <param name="attributeName">属性名称</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.Serialize``1(``0)">
            <summary>
            序列化实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.Serialize``1(``0,System.String)">
            <summary>
            序列化实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="defaultXmlNamespace">构建xml节点的缺省的命名空间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.DeSerialize``1(System.String)">
            <summary>
            反序列化实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlValue"></param>
            <param name="defaultXmlNamespace">构建xml节点的缺省的命名空间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.XmlHelper.DeSerialize``1(System.String,System.String)">
            <summary>
            反序列化实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlValue"></param>
            <param name="defaultXmlNamespace">构建xml节点的缺省的命名空间</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.AddWaterMarkImage(System.Drawing.Graphics,System.Int32,System.Int32,System.String,HiLand.Utility.Drawing.WaterMarkPositions,System.Single)">
            <summary>
            在已经存在的画布上水印
            </summary>
            <param name="graphics"></param>
            <param name="imageWidth"></param>
            <param name="imageHeight"></param>
            <param name="watermarImagePath"></param>
            <param name="WaterMarkPositions"></param>
            <param name="alpha">透明度,取值0-1之间的小数</param>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.AddWaterMarkImage(System.Drawing.Image,System.String,HiLand.Utility.Drawing.WaterMarkPositions,System.Single,System.Int32)">
            <summary>
            在原图上添加水印
            </summary>
            <param name="sourceImage"></param>
            <param name="waterMarkImagePath"></param>
            <param name="WaterMarkPositions"></param>
            <param name="alpha">透明度,取值0-1之间的小数</param>
            <param name="waterMarkQuality">水印的质量，取值0-100</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.AddWaterMarkImage(System.IO.Stream,System.String,HiLand.Utility.Drawing.WaterMarkPositions,System.Single,System.Int32)">
            <summary>
            在原图上添加水印
            </summary>
            <param name="sourceStream"></param>
            <param name="watermarImagePath"></param>
            <param name="WaterMarkPositions"></param>
            <param name="alpha">透明度,取值0-1之间的小数</param>
            <param name="waterMarkQuality">水印的质量，取值0-100</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.AddWaterMarkText(System.Drawing.Graphics,System.Int32,System.Int32,System.String,HiLand.Utility.Drawing.WaterMarkPositions,System.Single)">
            <summary>
            在已经存在的画布上水印
            </summary>
            <param name="graphics"></param>
            <param name="imageWidth"></param>
            <param name="imageHeight"></param>
            <param name="waterMarkText"></param>
            <param name="WaterMarkPositions"></param>
            <param name="alpha">透明度,取值0-1之间的小数</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.AddWaterMarkText(System.Drawing.Image,System.String,HiLand.Utility.Drawing.WaterMarkPositions,System.Single,System.Int32)">
            <summary>
            在原图上添加水印
            </summary>
            <param name="sourceImage"></param>
            <param name="waterMarkText"></param>
            <param name="WaterMarkPositions"></param>
            <param name="alpha">透明度,取值0-1之间的小数</param>
            <param name="waterMarkQuality">水印的质量，取值0-100</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.AddWaterMarkText(System.IO.Stream,System.String,HiLand.Utility.Drawing.WaterMarkPositions,System.Single,System.Int32)">
            <summary>
            在原图上添加水印
            </summary>
            <param name="sourceStream"></param>
            <param name="waterMarkText"></param>
            <param name="WaterMarkPositions"></param>
            <param name="alpha">透明度,取值0-1之间的小数</param>
            <param name="waterMarkQuality">水印的质量，取值0-100</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.WaterMarker.GetEncoderInfo(System.String)">
            <summary>
            通过Mime获取图像的编码（解码）器信息
            </summary>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Drawing.WaterMarkPositions">
            <summary>
            水印出现的位置
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.AutoCompleteEntity">
            <summary>
            自动完成功能传递的数据实体
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.AutoCompleteEntity.value">
            <summary>
            自动完成提示列表中选定项后，实际填充文本框的值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.AutoCompleteEntity.label">
            <summary>
            自动完成提示列表中显示的提示内容
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.AutoCompleteEntity.key">
            <summary>
            自动完成提示列表中选定项后，后台对应的实际标志值（通常可以是某实体的ID信息）
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.AutoCompleteEntity.details">
            <summary>
            自动完成提示列表中选定项后，可以传递和展示的其他内容
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.CascadingCollection">
            <summary>
            配合jquery.cascadingDropDown.js使用的选择项集合
            </summary>
        </member>
        <member name="M:HiLand.Utility.Entity.CascadingCollection.AddItem(System.String,System.String)">
            <summary>
            添加选择项目
            </summary>
            <param name="text"></param>
            <param name="value"></param>
        </member>
        <member name="M:HiLand.Utility.Entity.CascadingCollection.GetJSON">
            <summary>
            生成jquery.cascadingDropDown.js需要的JSON字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Entity.EntityHelper.Clone``1(``0)">
            <summary>
            浅克隆实体对象
            </summary>
            <typeparam name="T">实体对象的类型</typeparam>
            <param name="sourceEntity">源实体对象</param>
            <returns>克隆出的新实体对象</returns>
        </member>
        <member name="M:HiLand.Utility.Entity.EntityHelper.DeepClone``1(``0)">
            <summary>
            深克隆实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceEntity"></param>
            <returns></returns>
            <remarks>
            需要克隆的对象实体，必须标记特性[Serializable]
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Entity.EntityHelper.Compare``1(``0,``0,System.Collections.Generic.Dictionary{System.String,HiLand.Utility.Entity.DataForChange{System.String}}@,System.String[])">
            <summary>
            两个实体属性比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceEntity"></param>
            <param name="targetEntity"></param>
            <param name="resultData">属性并更的信息：key为变更的属性名称；value为包含变更前值和后值的数据</param>
            <param name="excludePropertyName">不进行比较的属性名称集合</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Entity.IDCard">
            <summary>
            身份证号码解析类
            </summary>
            <remarks>
            对外保留的是静态的Parse方法
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Entity.IDCard.GetProvince">
            <summary>
            省份名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Entity.IDCard.GetAddress">
            <summary>
            地址名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Entity.IDCard.CheckNumber">
            <summary>
            验证身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Entity.IDCard.Parse15">
            <summary>
            15位身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Entity.IDCard.Parse18">
            <summary>
            18位身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Entity.IDCard.Parse(System.String)">
            <summary>
            解析身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.CardNumber">
            <summary>
            身份证号码
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.ProvinceCode">
            <summary>
            省级政府的代码
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.CityCode">
            <summary>
            地、市级政府的代码，2位
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.CountyCode">
            <summary>
            县、区级政府代码，2位
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.AddressCode">
            <summary>
            地址代码，6位
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.BirthDay">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.HasError">
            <summary>
            解析中是否出错
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.IDCard.Sex">
            <summary>
            性别 1-男，0-女
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.DataForChange`1">
            <summary>
            信息改变时使用的数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:HiLand.Utility.Entity.DataForChange`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HiLand.Utility.Entity.DataForChange`1.#ctor(`0,`0)">
            <summary>
            构造函数
            </summary>
            <param name="originalData">原始数据</param>
            <param name="newData">新数据</param>
        </member>
        <member name="P:HiLand.Utility.Entity.DataForChange`1.OriginalData">
            <summary>
            信息改变前的原始值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.DataForChange`1.NewData">
            <summary>
            信息改变后的新值
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.ILogicStatusInfo">
            <summary>
            状态的表述接口
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ILogicStatusInfo.IsSuccessful">
            <summary>
            成功还是失败的状态
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ILogicStatusInfo.Message">
            <summary>
            成功还是失败的信息表述
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.Status.ISystemStatusInfo">
            <summary>
            系统级别的状态接口
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.Status.ISystemStatusInfo.SystemStatus">
            <summary>
            状态的类型
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.Status.ISystemStatusInfo.Message">
            <summary>
            具体要显示的信息
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.LogicStatusInfo">
            <summary>
            表示状态的信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.LogicStatusInfo.IsSuccessful">
            <summary>
            成功还是失败的状态
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.LogicStatusInfo.Message">
            <summary>
            具体要显示的信息
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.Status.SystemStatusInfo">
            <summary>
            系统级别的状态信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.Status.SystemStatusInfo.SystemStatus">
            <summary>
            状态的类型
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.Status.SystemStatusInfo.Message">
            <summary>
            具体要显示的信息
            </summary>
        </member>
        <member name="T:HiLand.Utility.Entity.ZTreeNodeEntity">
            <summary>
            zTree树节点的实体
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ZTreeNodeEntity.id">
            <summary>
            节点ID
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ZTreeNodeEntity.pId">
            <summary>
            父节点ID
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ZTreeNodeEntity.name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ZTreeNodeEntity.open">
            <summary>
            节点是否为打开状态
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ZTreeNodeEntity.nocheck">
            <summary>
            节点前是否出现选择框
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.CommonLevels">
            <summary>
            通用设置级别
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonLevels.NonSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonLevels.Level1">
            <summary>
            级别一
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonLevels.Level2">
            <summary>
            级别二
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonLevels.Level3">
            <summary>
            级别三
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonLevels.Level4">
            <summary>
            级别四
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonLevels.Level5">
            <summary>
            级别五
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.CompareModes">
            <summary>
            数据比较的模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.Equal">
            <summary>
            相等
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.NotEqual">
            <summary>
            不相等
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.LessThan">
            <summary>
            少于
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.NotLessThan">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.MoreThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.NotMoreThan">
            <summary>
            少于等于
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.Like">
            <summary>
            相似
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.LikeLeft">
            <summary>
            左侧相似
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompareModes.LikeRight">
            <summary>
            右侧相似
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.ConditionItemRelationships">
            <summary>
            查询条件项之间的关系
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.ConditionItemRelationships.AND">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.ConditionItemRelationships.OR">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DataBaseTypes">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataBaseTypes.MsSqlServer">
            <summary>
            微软SqlServer数据库
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataBaseTypes.Sqlite">
            <summary>
            Sqlite数据库
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataBaseTypes.Access">
            <summary>
            Access数据库
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DataLoadTypes">
            <summary>
            数据载入的方式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataLoadTypes.Static">
            <summary>
            数据静态载入
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataLoadTypes.Dynamic">
            <summary>
            数据动态载入
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DataSelectModes">
            <summary>
            数据选择模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataSelectModes.Single">
            <summary>
            单选模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataSelectModes.Multi">
            <summary>
            多选模式
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DataSelectTypes">
            <summary>
            数据选择方式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataSelectTypes.Checkbox">
            <summary>
            多选框
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataSelectTypes.Radio">
            <summary>
            单选框
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DataUsingModes">
            <summary>
            数据（被）使用的方式
            </summary>
            <remarks>即某信息是在前台被终端用户使用，还是在后台被管理员使用</remarks>
        </member>
        <member name="F:HiLand.Utility.Enums.DataUsingModes.EndUserMode">
            <summary>
            信息在前台被终端用户使用
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DataUsingModes.AdminManagerMode">
            <summary>
            信息在后台被管理员使用
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DateFormats">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DateFormats.YMD">
            <summary>
            年月日格式（中国的等亚洲国家多用此格式）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DateFormats.MDY">
            <summary>
            月日年格式（欧美多用此格式）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DateFormats.DMY">
            <summary>
            日月年格式（澳洲多用此格式）
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.DepartmentUserTypes">
            <summary>
            部门内的人员职责类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DepartmentUserTypes.Leader">
            <summary>
            部门负责人
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DepartmentUserTypes.ViceLeader">
            <summary>
            部门副负责人
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DepartmentUserTypes.Assist">
            <summary>
            秘书助手
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.DepartmentUserTypes.Staff">
            <summary>
            一般员工
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.EntityOperateStatuses">
            <summary>
            实体操作的状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EntityOperateStatuses.Successful">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EntityOperateStatuses.FailureDuplicateName">
            <summary>
            名称重复失败
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EntityOperateStatuses.FailureDuplicateEMail">
            <summary>
            Email重复失败
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EntityOperateStatuses.FailureDuplicateIDCard">
            <summary>
            身份证重复失败
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EntityOperateStatuses.FailureUnknowReason">
            <summary>
            其他未知原因失败
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.LevelTypes">
            <summary>
            (紧急性、重要性)程度类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.NonSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.Lowest">
            <summary>
            最低的
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.Lower">
            <summary>
            较低的
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.Low">
            <summary>
            低的
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.High">
            <summary>
            高的
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.Higher">
            <summary>
            较高的
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LevelTypes.Highest">
            <summary>
            最高的
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.ExecutorTypes">
            <summary>
            主体、客体行为对象的类型
            </summary>
            <remarks>
            行为主体：行为的主动提出对象、使用对象（如某人执行某事的时候，某人即为行为主体）
            行为客体：行为指派的被动对象（如给某人赋权限的时候，某人即为行为的客体）
            </remarks>
        </member>
        <member name="F:HiLand.Utility.Enums.ExecutorTypes.Department">
            <summary>
            部门
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.ExecutorTypes.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.ExecutorTypes.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.ExecutorTypes.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.FieldExtendModes">
            <summary>
            扩展信息的存储方式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.FieldExtendModes.None">
            <summary>
            不是一个扩展字段
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.FieldExtendModes.SelfTable">
            <summary>
            使用实体对应的本表的扩展字段存储（所有的扩展信息都记录在同一个扩展字段内，无法SQL过滤检索）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.FieldExtendModes.IsolateTable">
            <summary>
            使用独立的表存储扩展信息（每个扩展信息在独立表中均为一条独立记录，可以SQL过滤检索）
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.LogLevels">
            <summary>
            日志记录的级别
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Emerg">
            <summary>
            紧急 - 系统无法使用
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Alert">
            <summary>
            必须立即采取措施
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Crit">
            <summary>
            致命情况
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Error">
            <summary>
            错误情况
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Warn">
            <summary>
            警告情况
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Notice">
            <summary>
            一般重要情况
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Info">
            <summary>
            普通信息
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LogLevels.Debug">
            <summary>
            开发时调试信息
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.MaritalStatuses">
            <summary>
            婚姻状况
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.UnSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.Single">
            <summary>
            未婚
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.Married">
            <summary>
            已婚
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.Defacto">
            <summary>
            同居
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.Seperated">
            <summary>
            分居
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.Divorced">
            <summary>
            离婚
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.MaritalStatuses.Widowed">
            <summary>
            失偶
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.NumberBase">
            <summary>
            数字进制
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.NumberBase.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.NumberBase.Octal">
            <summary>
            八进制
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.NumberBase.Decimal">
            <summary>
            十进制
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.NumberBase.Hex">
            <summary>
            十六进制
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.OperateTypes">
            <summary>
            操作动作的类别
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OperateTypes.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OperateTypes.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OperateTypes.Get">
            <summary>
            获取
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OperateTypes.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OP.EnumItemDescriptionHelper.cache">
            <summary>
              A cache store, because accessing Attribute is according to reflection, it cost too much
              So I add a cache, which based on special enum Type.
            </summary>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumItemDescriptionHelper.GetDisplayValues(System.Object,System.Type)">
            <summary>
              Gets all <see cref="T:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute"/>
              for special enum value: <paramref name="value"/> and special enum type: <paramref name="enumType"/>.
            </summary>
            <param name="value">the value of special enum</param>
            <param name="enumType">the enum type of special enum</param>
            <returns>All attributes attatched on special enum value.</returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumItemDescriptionHelper.GetDisplayValue(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumItemDescriptionHelper.GetDisplayValue(System.Object,System.Type,System.String)">
            <summary>
              Gets the <see cref="T:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute"/> for special enum value: <paramref name="value"/>,
              special enum type: <paramref name="enumType"/> and special culture.
            </summary>
            <param name="value">the value of special enum</param>
            <param name="enumType">the enum type of special enum</param>
            <param name="displayTextCategory">显示哪个类别的文本描述信息.</param>
            <returns>The attributes attatched on special enum value.</returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumItemDescriptionHelper.GetDisplayValuesDetails(System.Object,System.Type)">
            <summary>
              Gets all <see cref="T:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute"/>
              for special enum value: <paramref name="enumItem"/> and special enum type: <paramref name="enumType"/>.
            </summary>
            <param name="enumItem">the value of special enum</param>
            <param name="enumType">the enum type of special enum</param>
            <returns>All attributes attatched on special enum value.</returns>
        </member>
        <member name="T:HiLand.Utility.Enums.PassingParamValueSourceTypes">
            <summary>
            参数值来源类型（数据传递的方式）
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.PermissionDataTypes">
            <summary>
            数据权限的类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionDataTypes.None">
            <summary>
            无数据权限
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionDataTypes.Self">
            <summary>
            自己的数据
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionDataTypes.DepatmentWithSub">
            <summary>
            部门数据（包括子部门）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionDataTypes.DepartmentWithoutSub">
            <summary>
            部门数据（不包括子部门）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionDataTypes.All">
            <summary>
            所有数据
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.PermissionValidateStatuses">
            <summary>
            权限验证的状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionValidateStatuses.Successful">
            <summary>
            验证成功
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionValidateStatuses.FailureUnLogin">
            <summary>
            验证失败(未登录)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionValidateStatuses.FailureNoPermission">
            <summary>
            验证失败(权限不足)
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.SystemStatuses">
            <summary>
            系统级别的状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.SystemStatuses.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.SystemStatuses.Tip">
            <summary>
            提示
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.SystemStatuses.Warnning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.SystemStatuses.Failuer">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.UserStatuses">
            <summary>
            用户的状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserStatuses.Unactivated">
            <summary>
            注册后未激活
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserStatuses.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserStatuses.Stopped">
            <summary>
            停用（表示计算机逻辑上的删除）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserStatuses.Deleted">
            <summary>
            被删除(表示业务逻辑上的物理删除，实际并未删除)
            </summary>
        </member>
        <member name="T:HiLand.Utility.Environments.ComputerHelper">
            <summary>
            计算机本身信息
            </summary>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetCpuID">
            <summary>
            获取CPU序列号代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetMacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetIPAddress">
            <summary>
            获取本机设置的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetDiskID">
            <summary>
            获取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetUserName">
            <summary>
            操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetSystemType">
            <summary>
            PC类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetTotalPhysicalMemory">
            <summary>
            物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Environments.ComputerHelper.GetComputerName">
            <summary>
            获取计算机名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Finance.SalaryTaxHelper">
            <summary>
            个税帮助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Finance.SalaryTaxHelper.GetSalaryTax(System.Decimal)">
            <summary>
            计算应缴工资税
            </summary>
            <param name="data">参与计算的应付工资（通常都是扣除掉保险公积金的工资）</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Finance.SalaryTaxHelper.GetSalaryTaxLevel(System.Decimal)">
            <summary>
            获取适用的工资税级别
            </summary>
            <param name="dataRemveThreadhold"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Handler.Ajax.AjaxHandler">
            <summary>
            允许前端Javascript中调用C#方法的Handler
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileAccesses.GenericRead">
             <summary>
            
             </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileAccesses.GenericWrite">
             <summary>
            
             </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileAccesses.GenericExecute">
             <summary>
            
             </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileAccesses.GenericAll">
             <summary>
            
             </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileShares.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileShares.Read">
            <summary>
            Enables subsequent open operations on an object to request read access.
            Otherwise, other processes cannot open the object if they request read access.
            If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileShares.Write">
            <summary>
            Enables subsequent open operations on an object to request write access.
            Otherwise, other processes cannot open the object if they request write access.
            If this flag is not specified, but the object has been opened for write access, the function fails.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.FileShares.Delete">
            <summary>
            Enables subsequent open operations on an object to request delete access.
            Otherwise, other processes cannot open the object if they request delete access.
            If this flag is not specified, but the object has been opened for delete access, the function fails.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.CreationDispositions.New">
            <summary>
            Creates a new file. The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.CreationDispositions.CreateAlways">
            <summary>
            Creates a new file, always.
            If a file exists, the function overwrites the file, clears the existing attributes, combines the specified file attributes,
            and flags with FILE_ATTRIBUTE_ARCHIVE, but does not set the security descriptor that the SECURITY_ATTRIBUTES structure specifies.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.CreationDispositions.OpenExisting">
            <summary>
            Opens a file. The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.CreationDispositions.OpenAlways">
            <summary>
            Opens a file, always.
            If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.Extend.CreationDispositions.TruncateExisting">
            <summary>
            Opens a file and truncates it so that its size is 0 (zero) bytes. The function fails if the file does not exist.
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.DatePathFormaters.YMD">
            <summary>
            年月日在一起的目录格式,比如 20120303
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.DatePathFormaters.Y_MD">
            <summary>
            年/月日的格式,比如 2012/0303
            </summary>
        </member>
        <member name="F:HiLand.Utility.IO.DatePathFormaters.Y_M_D">
            <summary>
            年/月/日的格式,比如 2012/03/03
            </summary>
        </member>
        <member name="P:HiLand.Utility.IO.OperateStreamEnventArgs.BytesReaded">
            <summary>
            (循环操作中每次)读取到的是字节数组
            </summary>
        </member>
        <member name="P:HiLand.Utility.IO.OperateStreamEnventArgs.CallBackObject">
            <summary>
            回调对象
            </summary>
        </member>
        <member name="T:HiLand.Utility.IO.OperateStreamEnventHandler">
            <summary>
            对流进行操作的委托
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.IOHelper.GetNativeFilePath(System.String)">
            <summary>
            获取物理路径（兼容WebApp/NativeApp两种方式）
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.IOHelper.GetNativeFilePath(System.String,System.Boolean)">
            <summary>
            获取物理路径（兼容WebApp/NativeApp两种方式）
            </summary>
            <param name="filePath"></param>
            <param name="IsAppendEndDirectorySeparatorChar">是否在路径的末尾附加目录分割标志（如果filePath是一个文件的路径，那么这个值请一定为false；如果为目录的路径这个值请为true）</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.IOHelper.GetRelativeVirtualPath(System.String,System.String)">
            <summary>
            将本地全路径（即以盘符开头的路径）转换成（相对）虚拟路径
            </summary>
            <param name="fullNativePath"></param>
            <param name="baseVirtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.IOHelper.BlocklyCircularlyOperateStream(System.IO.Stream,HiLand.Utility.IO.OperateStreamEnventHandler)">
            <summary>
            以分块的方式对流进行循环地操作
            </summary>
            <param name="inputSteam">输入的流</param>
            <param name="operateStreamEnventHandler">对流分块后，可以调用的具体的操作方法</param>
        </member>
        <member name="M:HiLand.Utility.IO.IOHelper.BlocklyCircularlyOperateStream(System.IO.Stream,HiLand.Utility.IO.OperateStreamEnventHandler,System.Object)">
            <summary>
            以分块的方式对流进行循环地操作
            </summary>
            <param name="inputSteam">输入的流</param>
            <param name="operateStreamEnventHandler">对流分块后，可以调用的具体的操作方法</param>
            <param name="callBackObject">操作方法operateStreamEnventHandler内部可以使用的回调对象（即可以让调用本分方法的客户端程序，传递一个对象给operateStreamEnventHandler）</param>
        </member>
        <member name="M:HiLand.Utility.IO.IOHelper.EnsureDatePath(System.String,HiLand.Utility.IO.DatePathFormaters)">
            <summary>
            在给定的基目录下建立以日期分割的子目录，并返回这个子目录
            </summary>
            <param name="nativeBasePath">基地址</param>
            <param name="datePathFormater">作为子目录的日期格式</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Finance.CAMLoan">
            <summary>
            Constant Amoritization Mortgage 等额本金还款（固定摊薄（本金）的抵押贷款）
            </summary>
        </member>
        <member name="M:HiLand.Utility.Finance.CAMLoan.GetPayment(System.Double,System.Double,System.Int32,System.Int32,Microsoft.VisualBasic.DueDate)">
             <summary>
            获取某个指定还款档期的还款信息
             </summary>
             <param name="paymentNumber">指定要计算的还款档期序号</param>
             <param name="rate">利率</param>
             <param name="paymentCount">还款总期数</param>
             <param name="totalAmount">贷款总费用</param>
             <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
             <returns>每期还款的额度</returns>
             <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
                如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="M:HiLand.Utility.Finance.CAMLoan.GetPaymentSchedule(System.Double,System.Double,System.Int32,HiLand.Utility.Finance.PaymentTermTypes,System.DateTime)">
            <summary>
            获取还款日程信息
            </summary>
            <param name="paymentNumber">指定要计算的还款档期序号</param>
            <param name="rate">利率</param>
            <param name="paymentCount">还款总期数</param>
            <param name="totalAmount">贷款总费用</param>
            <returns>每期还款的额度</returns>
            <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
               如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="M:HiLand.Utility.Finance.CAMLoan.GetPaymentSchedule(System.Double,System.Double,System.Int32,HiLand.Utility.Finance.PaymentTermTypes,System.DateTime,Microsoft.VisualBasic.DueDate)">
            <summary>
            获取还款日程信息
            </summary>
            <param name="paymentNumber">指定要计算的还款档期序号</param>
            <param name="rate">利率</param>
            <param name="paymentCount">还款总期数</param>
            <param name="totalAmount">贷款总费用</param>
            <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
            <returns>每期还款的额度</returns>
            <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
               如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="T:HiLand.Utility.Finance.CPMLoan">
            <summary>
            constant payment mortgage等额本息还款(每期均为固定支付费用的抵押贷款)
            </summary>
        </member>
        <member name="M:HiLand.Utility.Finance.CPMLoan.GetPaymentAmount(System.Double,System.Double,System.Int32,Microsoft.VisualBasic.DueDate)">
            <summary>
            获取每期还款的额度
            </summary>
            <param name="rate">利率</param>
            <param name="paymentCount">还款总期数</param>
            <param name="totalAmount">贷款总费用</param>
            <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
            <returns>每期还款的额度</returns>
            <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
               如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="M:HiLand.Utility.Finance.CPMLoan.GetPayment(System.Double,System.Double,System.Int32,System.Int32,Microsoft.VisualBasic.DueDate)">
             <summary>
            获取某个指定还款档期的还款信息
             </summary>
             <param name="paymentNumber">指定要计算的还款档期序号</param>
             <param name="rate">利率</param>
             <param name="paymentCount">还款总期数</param>
             <param name="totalAmount">贷款总费用</param>
             <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
             <returns>每期还款的额度</returns>
             <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
                如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="M:HiLand.Utility.Finance.CPMLoan.GetPaymentSchedule(System.Double,System.Double,System.Int32,HiLand.Utility.Finance.PaymentTermTypes,System.DateTime)">
            <summary>
            获取还款日程信息
            </summary>
            <param name="paymentNumber">指定要计算的还款档期序号</param>
            <param name="rate">利率</param>
            <param name="paymentCount">还款总期数</param>
            <param name="totalAmount">贷款总费用</param>
            <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
            <returns>每期还款的额度</returns>
            <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
               如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="M:HiLand.Utility.Finance.CPMLoan.GetPaymentSchedule(System.Double,System.Double,System.Int32,HiLand.Utility.Finance.PaymentTermTypes,System.DateTime,Microsoft.VisualBasic.DueDate)">
            <summary>
            获取还款日程信息
            </summary>
            <param name="paymentNumber">指定要计算的还款档期序号</param>
            <param name="rate">利率</param>
            <param name="paymentCount">还款总期数</param>
            <param name="totalAmount">贷款总费用</param>
            <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
            <returns>每期还款的额度</returns>
            <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
               如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="M:HiLand.Utility.Finance.LoanHelper.GetNextPaymentDate(System.DateTime,HiLand.Utility.Finance.PaymentTermTypes)">
            <summary>
            根据当前还款时间和还款周期，计算下一个还款时间
            </summary>
            <param name="thisPaymentDate">当前还款时间</param>
            <param name="paymentCircle">还款周期</param>
            <returns>一个还款时间</returns>
        </member>
        <member name="M:HiLand.Utility.Finance.LoanHelper.GetPaymentSchedule(System.Double,System.Double,System.Int32,HiLand.Utility.Finance.PaymentTermTypes,System.DateTime,Microsoft.VisualBasic.DueDate,HiLand.Utility.Event.Funcs{System.Double,System.Double,System.Int32,System.Int32,Microsoft.VisualBasic.DueDate,HiLand.Utility.Finance.Payment})">
            <summary>
            获取还款日程信息
            </summary>
            <param name="paymentNumber">指定要计算的还款档期序号</param>
            <param name="rate">利率</param>
            <param name="paymentCount">还款总期数</param>
            <param name="totalAmount">贷款总费用</param>
            <param name="dueDate">还款在每期的开始还是结尾时间，缺省为每期的结尾时间（大部分商业都是用结尾时间）</param>
            <param name="getPaymentFunc">生成每期贷款的方法</param>
            <returns>每期还款的额度</returns>
            <remarks>参数rate和参数paymentCount是呼应的。即如果paymentCount按照月计数，那么rate就必须指定为月利率；
               如果paymentCount按照年计数，那么rate就必须指定为年利率。</remarks>
        </member>
        <member name="T:HiLand.Utility.Finance.Payment">
            <summary>
            还款日程中，某一次还款的信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.Number">
            <summary>
            还款的序号
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.Principal">
            <summary>
            本次还款包含的本金
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.Interest">
            <summary>
            本次还款包含的利息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.Penalty">
            <summary>
            罚款
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.LateCharge">
            <summary>
            逾期费
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.OtherFee">
            <summary>
            其他费用
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.PureAmount">
            <summary>
            正常情况下本次还款的总额度（仅包括本金和利息）
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.Amount">
            <summary>
            本次还款总费用
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.PrincipalBalance">
            <summary>
            本次还款后，剩余的的本金(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.PaymentDate">
            <summary>
            本次还款的日期(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.TotalAmount">
            <summary>
            本次还款后，总的已还款总费用(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.TotalPrincipal">
            <summary>
            本次还款后，总的已还款本金(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.TotalInterest">
            <summary>
            本次还款后，总的已还款利息(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.TotalPenalty">
            <summary>
            本次还款后，总的已还款罚款(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.TotalLateCharge">
            <summary>
            本次还款后，总的已还款逾期费用(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="P:HiLand.Utility.Finance.Payment.TotalOtherFee">
            <summary>
            本次还款后，总的已还款其他费用(在还款日程的某个还款信息中使用；在计算某个单期还款信息的时候，此数据无效)
            </summary>
        </member>
        <member name="T:HiLand.Utility.Finance.RateConverter">
            <summary>
            利率转换器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Finance.RateConverter.GetRate(HiLand.Utility.Finance.PaymentTermTypes)">
            <summary>
            根据周期类型获取利率
            </summary>
            <param name="loanTermType"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Finance.RMB.GetChineseDisplayValue(System.Decimal)">
            <summary> 
            获取财物数据的人民币表示形式
            </summary> 
            <param name="financeValue">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:HiLand.Utility.Finance.RMB.GetChineseDisplayValue2(System.Decimal)">
            <summary> 
            获取财物数据的人民币表示形式
            </summary> 
            <param name="financeValue">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:HiLand.Utility.Finance.SimpleRateConverter.#ctor(System.Double,HiLand.Utility.Finance.PaymentTermTypes)">
            <summary>
            按照一般算数方法进行的利率转换
            </summary>
            <param name="rate">利率值</param>
            <param name="circle">利率周期</param>
        </member>
        <member name="M:HiLand.Utility.IO.PathHelper.CombineForNative(System.String[])">
            <summary>
            合并为本地路径
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.PathHelper.CombineForVirtual(System.String[])">
            <summary>
            合并为虚拟路径
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Logging.FileLogger">
            <summary>
            平面文件类型的日志
            </summary>
        </member>
        <member name="T:HiLand.Utility.Logging.ILogger">
            <summary>
            日志记录器接口
            </summary>
        </member>
        <member name="M:HiLand.Utility.Logging.ILogger.Log(HiLand.Utility.Logging.ILogEntity)">
            <summary>
            记录日志
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:HiLand.Utility.Logging.ILogger.Log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:HiLand.Utility.Logging.FileLogger.Log(HiLand.Utility.Logging.ILogEntity)">
            <summary>
            记录日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HiLand.Utility.Logging.FileLogger.Log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HiLand.Utility.Logging.FileLogger.Log(System.String,System.Boolean)">
            <summary>
            记录日志
            </summary>
            <param name="log"></param>
            <param name="isAutoAppendAddonData">是否自动附加日志的附加信息（比如时间等）</param>
        </member>
        <member name="T:HiLand.Utility.Logging.ILogEntity">
            <summary>
            日志实体接口
            </summary>
        </member>
        <member name="T:HiLand.Utility.Logging.LogEntity">
            <summary>
            日志实体信息
            </summary>
        </member>
        <member name="T:HiLand.Utility.Logging.LoggerFactory">
            <summary>
            日志创建工厂
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.Coordinate.CoordinateHelper">
            <summary>
            几何坐标帮助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.CoordinateHelper.ToSphericalCoordinatePoint(HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint)">
            <summary>
            直角坐标转球面坐标
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.CoordinateHelper.ToRectangularCoordinatePoint(HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint)">
            <summary>
            球面坐标转直角坐标
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint">
            <summary>
            直接坐标点
            </summary>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.CopyTo(HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint)">
            <summary>
            复制坐标值到目标点
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.CopyFrom(HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint)">
            <summary>
            从源点复制坐标值
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.Reset(System.Double,System.Double,System.Double)">
            <summary>
            重置坐标值
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.X">
            <summary>
            X坐标值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.Y">
            <summary>
            Y坐标值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.Z">
            <summary>
            Z坐标值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.RectangularCoordinatePoint.Zero">
            <summary>
            坐标原点
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint">
            <summary>
            球坐标点
            </summary>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="radius"></param>
            <param name="theta"></param>
            <param name="phi"></param>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.CopyTo(HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint)">
            <summary>
            复制坐标值到目标点
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.CopyFrom(HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint)">
            <summary>
            从源点复制坐标值
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.Reset(System.Double,System.Double,System.Double)">
            <summary>
            重置坐标值
            </summary>
            <param name="radius"></param>
            <param name="theta"></param>
            <param name="phi"></param>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.Radius">
            <summary>
             是从原点到 P 点的距离
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.Theta">
            <summary>
            是从原点到 P 点的连线与正 z-轴的夹角
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.Phi">
            <summary>
            从原点到 P 点的连线在 xy-平面的投影线，与正 x-轴的夹角
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.Coordinate.SphericalCoordinatePoint.Zero">
            <summary>
            坐标原点
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.StringParse.Operand">
            <summary>
            操作数类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operand.ConvertOperand(System.String)">
            <summary>
            转换操作数到指定的类型
            </summary>
            <param name="opd">操作数</param>
            <returns>返回对应的操作数类型</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operand.IsNumber(System.Object)">
            <summary>
            判断对象是否为数字
            </summary>
            <param name="value">对象值</param>
            <returns>是返回真,否返回假</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operand.IsDate(System.Object)">
            <summary>
            判断对象是否为日期
            </summary>
            <param name="value">对象值</param>
            <returns>是返回真,否返回假</returns>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.Operand.Type">
            <summary>
            操作数类型
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.Operand.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.Operand.Value">
            <summary>
            操作数值
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.StringParse.OperandTypes">
            <summary>
            操作数类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperandTypes.Func">
            <summary>
            函数
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperandTypes.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperandTypes.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperandTypes.Boolean">
            <summary>
            布尔
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperandTypes.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.StringParse.Operator">
            <summary>
            运算符类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operator.AdjustOperator(System.String,System.String,System.Int32@)">
            <summary>
            对于>或者&lt;运算符，判断实际是否为>=,&lt;&gt;、&lt;=，并调整当前运算符位置
            </summary>
            <param name="currentOpt">当前运算符</param>
            <param name="currentExp">当前表达式</param>
            <param name="currentOptPos">当前运算符位置</param>
            <param name="adjustOptPos">调整后运算符位置</param>
            <returns>返回调整后的运算符</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operator.ConvertOperator(System.String,System.Boolean)">
            <summary>
            转换运算符到指定的类型
            </summary>
            <param name="opt">运算符</param>
            <param name="isBinaryOperator">是否为二元运算符</param>
            <returns>返回指定的运算符类型</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operator.ConvertOperator(System.String)">
            <summary>
            转换运算符到指定的类型
            </summary>
            <param name="opt">运算符</param>
            <returns>返回指定的运算符类型</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operator.IsBinaryOperator(System.Collections.Generic.Stack{System.Object}@,System.Collections.Generic.Stack{HiLand.Utility.Mathes.StringParse.Operator}@,System.String)">
            <summary>
            运算符是否为二元运算符,该方法有问题，暂不使用
            </summary>
            <param name="tokens">语法单元堆栈</param>
            <param name="operators">运算符堆栈</param>
            <param name="currentOpd">当前操作数</param>
            <returns>是返回真,否返回假</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.Operator.ComparePriority(HiLand.Utility.Mathes.StringParse.OperatorTypes,HiLand.Utility.Mathes.StringParse.OperatorTypes)">
            <summary>
            运算符优先级比较
            </summary>
            <param name="optA">运算符类型A</param>
            <param name="optB">运算符类型B</param>
            <returns>A与B相比，-1，低；0,相等；1，高</returns>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.Operator.Type">
            <summary>
            运算符类型
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.Operator.Value">
            <summary>
            运算符值
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.StringParse.OperatorTypes">
            <summary>
            运算符类型(从上到下优先级依次递减)，数值越大，优先级越低
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.LB">
            <summary>
            左括号:(,left bracket
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.RB">
            <summary>
            右括号),right bracket
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.NOT">
            <summary>
            逻辑非,!,NOT
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.PS">
            <summary>
            正号,+,positive sign
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.NS">
            <summary>
            负号,-,negative sign
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.TAN">
            <summary>
            正切，tan
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.ATAN">
            <summary>
            反正切，atan
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.MUL">
            <summary>
            乘,*,multiplication
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.DIV">
            <summary>
            除,/,division
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.MOD">
            <summary>
            余,%,modulus
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.ADD">
            <summary>
            加,+,Addition
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.SUB">
            <summary>
            减,-,subtraction
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.LT">
            <summary>
            小于,less than
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.LE">
            <summary>
            小于或等于,less than or equal to
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.GT">
            <summary>
            大于,>,greater than
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.GE">
            <summary>
            大于或等于,>=,greater than or equal to
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.ET">
            <summary>
            等于,=,equal to
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.UT">
            <summary>
            不等于,unequal to
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:HiLand.Utility.Mathes.StringParse.OperatorTypes.AND" -->
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.OR">
            <summary>
            逻辑或,|,OR
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.CA">
            <summary>
            逗号,comma
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.END">
            <summary>
            结束符号 @
            </summary>
        </member>
        <member name="F:HiLand.Utility.Mathes.StringParse.OperatorTypes.ERR">
            <summary>
            错误符号
            </summary>
        </member>
        <member name="T:HiLand.Utility.Mathes.StringParse.RPN">
            <summary>
            Reverse Polish Notation 逆波兰式
            </summary>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.RPN.IsMatching(System.String)">
            <summary>
            检查表达式中特殊符号(双引号、单引号、井号、左右括号)是否匹配 
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.RPN.FindOperator(System.String,System.String)">
            <summary>
            从表达式中查找运算符位置
            </summary>
            <param name="exp">表达式</param>
            <param name="findOpt">要查找的运算符</param>
            <returns>返回运算符位置</returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.RPN.Parse(System.String)">
            <summary>
            语法解析,将中缀表达式转换成后缀表达式(即逆波兰表达式)
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Mathes.StringParse.RPN.Evaluate">
            <summary>
            对逆波兰表达式求值
            </summary>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.RPN.Tokens">
            <summary>
            最终逆波兰式堆栈
            </summary>
        </member>
        <member name="P:HiLand.Utility.Mathes.StringParse.RPN.RPNExpression">
            <summary>
            生成的逆波兰式字符串
            </summary>
        </member>
        <member name="T:HiLand.Utility.Native.ControlHelper">
            <summary>
            控件操作帮助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Native.ControlHelper.CrossThreadInvoke``1(System.Windows.Forms.Control,HiLand.Utility.Event.Actions{``0},``0)">
            <summary>
            对控件的跨线程调用
            </summary>
            <typeparam name="T">委托参数的类型</typeparam>
            <param name="control">目标控件</param>
            <param name="action">无返回值的委托</param>
            <param name="args">委托的参数</param>
        </member>
        <member name="M:HiLand.Utility.Native.ControlHelper.CrossThreadInvoke``2(System.Windows.Forms.Control,HiLand.Utility.Event.Funcs{``0,``1},``0)">
            <summary>
            对控件的跨线程调用
            </summary>
            <typeparam name="T">委托参数的类型</typeparam>
            <typeparam name="TResult">方法返回值的类型</typeparam>
            <param name="control">目标控件</param>
            <param name="func">有回值的委托</param>
            <param name="args">委托的参数</param>
        </member>
        <member name="M:HiLand.Utility.Native.DialogMisc.ConfirmIsEffectButton(System.Windows.Forms.DialogResult)">
            <summary>
            判断当前对话框中是否点击了 “YES”或者“OK”按钮
            </summary>
            <param name="dialogResult"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Native.IdentityScope">
            <summary>
            局域网账号模拟登录
            </summary>
        </member>
        <member name="M:HiLand.Utility.Native.IdentityScope.#ctor(System.String,System.String,System.String)">
            <summary>
            登录
            </summary>
            <param name="userName">用户名</param>
            <param name="domainName">第二个参数是域名，有域名的话写域名，没有域名写目标机器的IP·</param>
            <param name="password">密码</param>
        </member>
        <member name="T:HiLand.Utility.Native.MessageBoxHelper">
            <summary>
            对话框辅助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            连接FTP
            </summary>
            <param name="FtpServerIP">FTP连接地址</param>
            <param name="FtpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录</param>
            <param name="FtpUserID">用户名</param>
            <param name="FtpPassword">密码</param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.Upload(System.String)">
            <summary>
            上传
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.Download(System.String,System.String)">
            <summary>
            下载
            </summary>
            <param name="filePath"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.RemoveDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="folderName"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.GetFilesDetailList">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.GetFileList(System.String)">
            <summary>
            获取当前目录下文件列表(仅文件)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.GetDirectoryList">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="RemoteDirectoryName">指定的目录名</param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.FileExist(System.String)">
            <summary>
            判断当前目录下指定的文件是否存在
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.GetFileSize(System.String)">
            <summary>
            获取指定文件大小
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.ReName(System.String,System.String)">
            <summary>
            改名
            </summary>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.MovieFile(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:HiLand.Utility.Net.FTP.FTPHelper.GotoDirectory(System.String,System.Boolean)">
            <summary>
            切换当前目录
            </summary>
            <param name="DirectoryName"></param>
            <param name="IsRoot">true 绝对路径   false 相对路径</param>
        </member>
        <member name="T:HiLand.Utility.Office.ExcelHelper">
            <summary>
            Excel操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.WriteExcel(System.Data.DataTable)">
            <summary>
            根据数据写入Excel文件(本方法返回的是Excel的流数据，请调用相应方法进行文件保存)
            </summary>
            <param name="sourceTable">源数据</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.WriteExcel(System.Data.DataTable,System.Boolean)">
            <summary>
            根据数据写入Excel文件(本方法返回的是Excel的流数据，请调用相应方法进行文件保存)
            </summary>
            <param name="sourceTable">源数据</param>
            <param name="isDisplayHeader">是否显示表头</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.WriteExcel``1(System.Collections.Generic.IList{``0},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取实体列表导出为Excel的流
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityList"></param>
            <param name="fieldsMap">实体的属性名称与Excel列名的映射字典,其中字典的Key支持二级属性，比如CurrentBank.AccountNumber
            其会加载属性CurrentBank的子属性AccountNumber的信息</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.ReadExcel(System.IO.Stream,System.Int32)">
            <summary>
            读取Excel文件(第一个shell)
            </summary>
            <param name="excelFileStream">Excel文件流</param>
            <param name="headerRowNumber">表头行的索引号(从1开始计数)</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.ReadExcel(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            读取Excel文件
            </summary>
            <param name="excelFileStream">Excel文件流</param>
            <param name="sheetNumber">工作表的索引号(从1开始计数)</param>
            <param name="headerRowNumber">表头行的索引号(从1开始计数)</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.ReadExcel(System.IO.Stream,System.String,System.Int32)">
            <summary>
            读取Excel文件（流）
            </summary>
            <param name="excelFileStream">Excel文件流</param>
            <param name="sheetName">工作表的名称</param>
            <param name="headerRowNumber">表头行的索引号(从1开始计数)</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Office.ExcelHelper.GetDataTable(NPOI.SS.UserModel.ISheet,System.Int32)">
            <summary>
            从工作表获取DataTable
            </summary>
            <param name="sheet">工作表</param>
            <param name="headerRowIndex">表头行的索引号(从0开始计数)</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Pattern.EmptyFactory`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            虽然这样写可以满足要求，但是可以发现基本没什么好处，写EmptyFactory还不如new 来得快。
            不过里面实现缓存对象的机制，在一定程度上能缓解对系统的压力。
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Reflection.MemberInfoWithAttributeCollection`2">
            <summary>
            
            </summary>
            <typeparam name="TMemberInfo"></typeparam>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="M:HiLand.Utility.Reflection.MemberInfoWithAttributeCollection`2.GetExtendedMemberInfo(System.Type)">
            <summary>
            获取模型的所有被标注了TAttribute特性的成员信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.MemberInfoWithAttributeCollection`2.GetExtendedMemberInfo``1">
            <summary>
            获取模型的所有被标注了TAttribute的属性信息
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Security.HashHelper">
            <summary>
            哈希算法辅助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Security.HashHelper.GetFileHashValue(System.String)">
            <summary>
            获取指定文件的hash值
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
            <remarks>使用MD5算法进行计算，如果使用其他hash算法可以使用另外一个重载</remarks>
        </member>
        <member name="M:HiLand.Utility.Security.HashHelper.GetFileHashValue(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            获取指定文件的hash值
            </summary>
            <param name="hashAlgorithm">hash算法</param>
            <param name="fileFullPath">需要计算文件的全路径</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Setting.INIConfig">
            <summary>
            ini配置文件读写工具
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            写INI文件的API函数 
            </summary>
            <param name="sectionName">节的名字</param>
            <param name="key">键的名字</param>
            <param name="value"></param>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            读INI文件的API函数 
            </summary>
            <param name="sectionName">节的名字</param>
            <param name="key">键的名字</param>
            <param name="defaultValue">如果INI文件中没有前两个参数指定的节名或键名,则将返回此默认值</param>
            <param name="returnValue">读取得到的参数值</param>
            <param name="cacheSize">参数返回值的缓冲大小</param>
            <param name="fileFullName">ini文件名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.#ctor(System.String)">
            <summary>
            类的构造函数，传递INI文件名 
            </summary>
            <param name="iniFileFullName"></param>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.WriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件 
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.ReadValue(System.String,System.String)">
            <summary>
            读取INI文件指定值
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.INIConfig.ClearSection(System.String)">
            <summary>
            删除ini文件下personal段落下的所有键
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.PermissionDataConfig">
            <summary>
            数据权限配置项信息
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.PermissionDataConfig.GetConfig">
            <summary>
            从配置文件读取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.PermissionDataConfig.GetConfig(System.String)">
            <summary>
            从配置文件读取配置
            </summary>
            <param name="sectionNodePath">配置节点的路径</param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataConfig.Applications">
            <summary>
            所有的应用
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataConfig.AllSubModules">
            <summary>
            所有的子模块
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.PermissionDataApplication">
            <summary>
            数据权限配置项实体-应用程序
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataApplication.Guid">
            <summary>
            Guid信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataApplication.Name">
            <summary>
            名称信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataApplication.Modules">
            <summary>
            模块集合
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.PermissionDataModule">
            <summary>
            数据权限配置项实体-模块
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataModule.Guid">
            <summary>
            Guid信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataModule.Name">
            <summary>
            名称信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataModule.SubModules">
            <summary>
            子模块集合
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.PermissionDataSubModule">
            <summary>
            数据权限配置项实体-子模块
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataSubModule.Guid">
            <summary>
            Guid信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataSubModule.Name">
            <summary>
            名称信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataSubModule.Area">
            <summary>
            功能操作的对应的MVC中Area的名称
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PermissionDataSubModule.Controller">
            <summary>
            功能操作的对应的MVC中控制器名称
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.PermissionDataSectionHandler">
            <summary>
            数据权限配置项读取器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.PermissionDataSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            获取config节点，创建配置信息实体
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SalaryTaxConfig">
            <summary>
            工资税配置信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxConfig.Instance">
            <summary>
            工资税配置信息实例
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxConfig.SalaryTax">
            <summary>
            工资税计算信息
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SalaryTax">
            <summary>
            工资税计算信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTax.TaxThreshold">
            <summary>
            工资税起征点
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTax.SalaryTaxLevels">
            <summary>
            工资税起征级别列表
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SalaryTaxLevel">
            <summary>
            工资税起征级别
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxLevel.Name">
            <summary>
            个税起征级别的名称
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxLevel.Min">
            <summary>
            个税起征级别的最小值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxLevel.Max">
            <summary>
            个税起征级别的最大值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxLevel.Rate">
            <summary>
            个税起征级别的税率
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SalaryTaxLevel.ExpressCalcValue">
            <summary>
            个税起征级别的速算扣除数
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SalaryTaxSectionHandler">
            <summary>
            工资税配置节获取器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.SalaryTaxSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            获取config节点，创建配置信息实体
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SystemTaskSectionConfig">
            <summary>
            系统任务配置信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskSectionConfig.Instance">
            <summary>
            系统任务配置信息实例
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskSectionConfig.SystemTaskOfDailyExcutorList">
            <summary>
            每日执行的系统任务列表
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity">
            <summary>
            每日执行的系统任务实体
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.GetAddonItemValue(System.String)">
            <summary>
            获取Addon内部里面设置项的值
            </summary>
            <param name="addonKey"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.GetAddonItemValue``1(System.String)">
            <summary>
            获取Addon内部里面设置项的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="addonKey"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.ExcuteHour">
            <summary>
            执行的小时点值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.ExcuteMinute">
            <summary>
            执行的分钟值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.IsUse">
            <summary>
            是否启用此任务
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.Addon">
            <summary>
            任务的附属信息
            </summary>
            <remarks>
            格式类似如下 key1:value1||key2:value2
            </remarks>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SystemTaskOfDailyExcutorEntity.Type">
            <summary>
            任务对应类的类型
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SystemTaskSectionHandler">
            <summary>
            系统任务配置节获取器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.SystemTaskSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            获取config节点，创建配置信息实体
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.UI.HttpPostedFileHelper.HasFile(System.Web.HttpPostedFile)">
            <summary>
            判断上传控件中是否有选中的文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.CookieHelper.ClearCookie(System.String)">
            <summary>
            清除指定Cookie
            </summary>
            <param name="cookieName">cookie的名称</param>
        </member>
        <member name="M:HiLand.Utility.Web.CookieHelper.GetCookie(System.String)">
            <summary>
            获取指定Cookie值
            </summary>
            <param name="cookieName">cookie的名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            添加一个Cookie（临时cookie）
            </summary>
            <param name="cookieName">cookie的名称</param>
            <param name="cookieValue">cookie的值</param>
        </member>
        <member name="M:HiLand.Utility.Web.CookieHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            添加一个Cookie
            </summary>
            <param name="cookieName">cookie的名称</param>
            <param name="cookieValue">cookie的值</param>
            <param name="expires">过期时间 DateTime</param>
        </member>
        <member name="M:HiLand.Utility.Web.CookieHelper.ClientID">
            <summary>
            获取为每个一个客户端分配的一个Guid
            </summary>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Web.RequestHelper">
            <summary>
            请求对象帮助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.AddOrModifyQueryString(System.Web.HttpRequest,System.String,System.String)">
            <summary>
            添加或者修改请求信息中的查询字符串的值
            </summary>
            <param name="request"></param>
            <param name="queryStringkey">要修改的查询查询字符串的键</param>
            <param name="queryStringValue">要修改的查询查询字符串的值(如果其为string.Emtpy或者null,那么表示从查询字符串中移除这个选项)</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetOriginalUrlWithoutSchemeHeader">
            <summary>
            获取当前请求的不带请求头(例如"http://"等)的原始地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetOriginalUrlWithoutSchemeHeader(System.String)">
            <summary>
            获取不带请求头(例如"http://"等)的原始地址
            </summary>
            <param name="originalUrl">完整的请求地址（即HttpContext.Current.Request.Url.OriginalString）</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetValue(System.String)">
            <summary>
            获取请求信息的参数值
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
            <remarks>
            其会从多种集合里面获取传递的参数信息：From，Cookie，Session，QueryString，ServerVariables等
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetValue``1(System.String)">
            <summary>
            获取请求信息的参数值
            </summary>
            <typeparam name="T">参数的类型</typeparam>
            <param name="paramName">参数名称</param>
            <returns></returns>
            <remarks>
            其会从多种集合里面获取传递的参数信息：From，Cookie，Session，QueryString，ServerVariables等
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetValue``1(System.String,``0)">
            <summary>
            获取请求信息的参数值
            </summary>
            <typeparam name="T">参数的类型</typeparam>
            <param name="paramName">参数名称</param>
            <param name="defaultValue">缺省值</param>
            <returns>
            
            </returns>
            <remarks>
            其会从多种集合里面获取传递的参数信息：From，Cookie，Session，QueryString，ServerVariables等
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetValue(HiLand.Utility.Enums.PassingParamValueSourceTypes,System.String,System.String)">
            <summary>
            获取请求信息的参数值
            </summary>
            <param name="paramName">参数名称</param>
            <returns></returns>
            <remarks>
            其会从指定的数据源集合里面获取传递的参数信息，数据源包括：From，Cookie，Session，QueryString，ServerVariables等
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetValue``1(HiLand.Utility.Enums.PassingParamValueSourceTypes,System.String,``0)">
            <summary>
            获取请求信息的参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceType"></param>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <remarks>
            其会从指定的数据源集合里面获取传递的参数信息，数据源包括：From，Cookie，Session，QueryString，ServerVariables等
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.GetValue``1(HiLand.Utility.Enums.PassingParamValueSourceTypes,System.String)">
            <summary>
            获取请求信息的参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceType"></param>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <remarks>
            其会从指定的数据源集合里面获取传递的参数信息，数据源包括：From，Cookie，Session，QueryString，ServerVariables等
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.ResolveUrl(System.String)">
            <summary>
            解析页面能够使用的url（相当于Page.ResolveUrl）
            </summary>
            <param name="originalUrl"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.RequestHelper.ParseUrl(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            分析 url 字符串中的参数信息
            </summary>
            <param name="url">输入的 URL</param>
            <param name="baseUrl">输出 URL 的基础部分</param>
            <param name="nvc">输出分析后得到的 (参数名,参数值) 的集合</param>
        </member>
        <member name="P:HiLand.Utility.Web.RequestHelper.CurrentRequest">
            <summary>
            当前的请求信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Web.RequestHelper.CurrentFullUrl">
            <summary>
            获取当前请求的完整url
            </summary>
        </member>
        <member name="P:HiLand.Utility.Web.RequestHelper.IsPostRequest">
            <summary>
            判断当前是否为Post请求
            </summary>
            <returns>是否接收到了Post请求</returns>
        </member>
        <member name="P:HiLand.Utility.Web.RequestHelper.IsGetRequest">
            <summary>
            判断当前是否为Get请求
            </summary>
            <returns>是否接收到了Get请求</returns>
        </member>
        <member name="P:HiLand.Utility.Web.RequestHelper.ApplicationRootPath">
            <summary>
            获取当前应用程序的跟路径
            </summary>
        </member>
        <member name="T:HiLand.Utility.Data.SQLInjectionHelper">
            <summary>
            SQL注入操作辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.SQLInjectionHelper.IsSQLInjectionSafe(System.String)">
            <summary>
            判断待验证信息对SQL注入来说是否为安全的
            </summary>
            <param name="informationToValide">判断待验证信息</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.SQLInjectionHelper.GetSafeSqlBeforeSave(System.String)">
            <summary>
            向SQL数据库保持数据前转化非法字符
            </summary>
            <param name="informationToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.SQLInjectionHelper.RecoverOriginalSqlAfterLoad(System.String)">
            <summary>
            从SQL数据库获取数据后将非法信息还原（为了后续的页面显示）
            </summary>
            <param name="informationToRecover"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.SQLInjectionHelper.GetSafeEntityBeforeSave``1(``0)">
            <summary>
            向SQL数据库保持数据实体前转化非法字符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
            <remarks>其仅能处理实体的一级属性</remarks>
        </member>
        <member name="M:HiLand.Utility.Data.SQLInjectionHelper.RecoverOriginalEntityAfterLoad``1(``0)">
            <summary>
            从SQL数据库获取数据实体后将非法信息还原（为了后续的页面显示）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
            <remarks>其仅能处理实体的一级属性</remarks>
        </member>
        <member name="T:HiLand.Utility.Data.StringHelper">
            <summary>
            字符串操作辅助类
            </summary>
        </member>
        <member name="F:HiLand.Utility.Data.StringHelper.Empty">
            <summary>
            空字符串
            </summary>
            <remarks>
            此处之所以声明为常量，是因为其可以在方法参数的缺省值中使用
            如果是在一般情况下可以直接使用String.Empty
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.SubString(System.String,System.Int32)">
            <summary>
            字符串截取
            </summary>
            <param name="data"></param>
            <param name="remainCharCount"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.SubString(System.String,System.Int32,System.String)">
            <summary>
            字符串截取
            </summary>
            <param name="data"></param>
            <param name="remainCharCount"></param>
            <param name="postFixAdded">在截取后的字符串后加入后缀</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.PrefixString(System.String,System.Int32)">
            <summary>
            给字符串添加固定数目的空格字符作为前缀
            </summary>
            <param name="data"></param>
            <param name="prefixCharCount"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.PrefixString(System.String,System.Int32,System.String)">
            <summary>
            给字符串添加固定数目的指定字符串作为前缀
            </summary>
            <param name="data"></param>
            <param name="prefixCharCount"></param>
            <param name="prefexer"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.FirstCharToUpper(System.String)">
            <summary>
            把字符串的第一个字符变为大写
            </summary>
            <param name="data">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.SplitToArray(System.String,System.String[])">
            <summary>
            将某字符串按(类似如下格式 A||B||C)照某分隔符进行切分成字符数组
            </summary>
            <param name="data">原始字符串</param>
            <param name="seperators">分隔符数组</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.SplitToDictionary(System.String,System.String,System.String[])">
            <summary>
            将某字符串(类似如下格式 key1:value1||key2:value2)按照分隔符进行切分成字典
            </summary>
            <param name="data"></param>
            <param name="keyValueSeperator">key与value之间的分隔符</param>
            <param name="itemSeperators">多个项之间的分割符</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.GetPlaceHolderList(System.String,System.String,System.String)">
            <summary>
            获取某字符串内的占位子字符串集合
            </summary>
            <param name="data"></param>
            <param name="placeHolderPrefixer"></param>
            <param name="placeHolderPostfixer"></param>
            <returns></returns>
            <remarks>
            待处理的字符串类似如下格式 {AccidentEnterprise}+{AccidentPerson}，其中大括号是占位符的开始结束前后缀，
            AccidentEnterprise和AccidentPerson是占位子字符串
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.GetBeforeSeperatorString(System.String,System.String)">
            <summary>
            获取字符串分隔符前面的内容
            </summary>
            <param name="data"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.GetAfterSeperatorString(System.String,System.String)">
            <summary>
            获取字符串分隔符后面的内容
            </summary>
            <param name="data"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="data">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.IsEmail(System.String)">
            <summary>
            判断一个字符串是否为Email格式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.IsInt(System.String)">
            <summary>
            判断一个字符串是否是数字
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.IsDateTime(System.String)">
            <summary>
            判断一个字符串是否是时间
            </summary>
            <param name="data"></param>
            <returns></returns>
            <remarks>
             TODO:这个还需要加入时间格式（区域）判断
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.IsDecimal(System.String)">
            <summary>
            判断一个字符串是否是decimal类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.Repeate(System.String,System.Int32)">
            <summary>
            获取重复n次后的字符串
            </summary>
            <param name="originalValue"></param>
            <param name="repeateCount"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.GetByteArray(System.String)">
            <summary>
            获取外部字节数组的方法
            </summary>
            <param name="data">待转换字符串</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.StringHelper.GetByteArray(System.String,System.Text.Encoding)">
            <summary>
            获取外部字节数组的方法
            </summary>
            <param name="data">待转换字符串</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.Thumbnail.MakeThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImageFullName">源图路径（物理路径）</param>
            <param name="thumbnailFullName">缩略图路径（物理路径）</param>
            <param name="thumbnailWidth">缩略图宽度</param>
            <param name="thumbnailHeight">缩略图高度</param>
        </member>
        <member name="M:HiLand.Utility.Drawing.Thumbnail.MakeThumbnail(System.String,System.Int32,System.Int32,HiLand.Utility.Drawing.ThumbnailCutModes)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImageFullName">源图路径（物理路径）</param>
            <param name="thumbnailFullName">缩略图路径（物理路径）</param>
            <param name="thumbnailWidth">缩略图宽度</param>
            <param name="thumbnailHeight">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:HiLand.Utility.Drawing.Thumbnail.MakeThumbnail(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImageStream">源图路径的数据流</param>
            <param name="thumbnailFullName">缩略图路径（物理路径）</param>
            <param name="thumbnailWidth">缩略图宽度</param>
            <param name="thumbnailHeight">缩略图高度</param>
        </member>
        <member name="M:HiLand.Utility.Drawing.Thumbnail.MakeThumbnail(System.IO.Stream,System.Int32,System.Int32,HiLand.Utility.Drawing.ThumbnailCutModes)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImageStream">源图的数据流</param>
            <param name="thumbnailFullName">缩略图路径（物理路径）</param>
            <param name="thumbnailWidth">缩略图宽度</param>
            <param name="thumbnailHeight">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:HiLand.Utility.Drawing.Thumbnail.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImage">源图Image信息</param>
            <param name="thumbnailWidth">缩略图宽度</param>
            <param name="thumbnailHeight">缩略图高度</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Drawing.Thumbnail.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,HiLand.Utility.Drawing.ThumbnailCutModes)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImage">源图Image信息</param>
            <param name="thumbnailWidth">缩略图宽度</param>
            <param name="thumbnailHeight">缩略图高度</param>
            <param name="thumbCutMode"></param>
            <returns></returns>
        </member>
        <member name="F:HiLand.Utility.Drawing.ThumbnailCutModes.HW">
            <summary>
            指定高宽缩放（可能变形）  
            </summary>
        </member>
        <member name="F:HiLand.Utility.Drawing.ThumbnailCutModes.W">
            <summary>
            指定宽，高按比例 
            </summary>
        </member>
        <member name="F:HiLand.Utility.Drawing.ThumbnailCutModes.H">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:HiLand.Utility.Drawing.ThumbnailCutModes.Auto">
            <summary>
            自适应（根据缩略图的高宽比与原图的高宽比匹配最合适的情形，不变形）   
            </summary>
        </member>
        <member name="M:HiLand.Utility.Entity.EntityValidation.GetValidateResult(System.Object)">
            <summary>
            验证实体对象的所有带验证特性的元素  并返回验证结果  如果返回结果为String.Empty 则说明元素符合验证要求
            </summary>
            <param name="entityObject">实体对象</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Entity.ValidateAttribute">
            <summary>
            为元素添加验证信息的特性类
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateAttribute.validateType">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateAttribute.minLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateAttribute.maxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="M:HiLand.Utility.Entity.ValidateAttribute.#ctor(HiLand.Utility.Entity.ValidateTypes)">
            <summary>
            指定采取何种验证方式来验证元素的有效性
            </summary>
            <param name="validateType"></param>
        </member>
        <member name="P:HiLand.Utility.Entity.ValidateAttribute.ValidateType">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ValidateAttribute.MinLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:HiLand.Utility.Entity.ValidateAttribute.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsEmpty">
            <summary>
            字段或属性是否为空字串
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.MinLength">
            <summary>
            字段或属性的最小长度
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.MaxLength">
            <summary>
            字段或属性的最大长度
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsNumber">
            <summary>
            字段或属性的值是否为数值型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsDateTime">
            <summary>
            字段或属性的值是否为时间类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsDecimal">
            <summary>
            字段或属性的值是否为正确的浮点类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsTelphone">
            <summary>
            字段或属性的值是否为固定电话号码格式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsMobile">
            <summary>
            字段或属性的值是否为手机号码格式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsEmail">
            <summary>
            字段或属性的值是否为电子邮件格式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Entity.ValidateTypes.IsIP">
            <summary>
            字段或属性的值是否为IP格式
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.AttchmentTypes">
            <summary>
            附件类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.AttchmentTypes.CommonFile">
            <summary>
            一般文件
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.AttchmentTypes.Photo">
            <summary>
            现场照片
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.AttchmentTypes.Poster">
            <summary>
            海报
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.AttchmentTypes.UserAvatar">
            <summary>
            用户头像
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.AttchmentTypes.NameCard">
            <summary>
            用户名片
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.CharCategories">
            <summary>
            字符类别序列
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CharCategories.Number">
            <summary>
            只有数字
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CharCategories.NumberAndChar">
            <summary>
            包含数字和大小写字符
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CharCategories.NumberAndCharIgnoreCase">
            <summary>
            包含数字和大写字符
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.CommonStatuses">
            <summary>
            数据常用状态
            </summary>
            <remarks>
            除了正常和非正常还可能有第三种状态(只是目前未用的)(这是跟枚举Logics的区别)
            </remarks>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonStatuses.UnNormal">
            <summary>
            非正常状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CommonStatuses.Normal">
            <summary>
            正常状态
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.CompressTypes">
            <summary>
            数据压缩类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompressTypes.GZip">
            <summary>
            GZip压缩
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompressTypes.Deflate">
            <summary>
            Deflate 压缩
             </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CompressTypes.None">
            <summary>
             不支持压缩
             </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.CreateUserRoleStatuses">
            <summary>
            创建用户角色时在状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CreateUserRoleStatuses.Successful">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CreateUserRoleStatuses.FailureDuplicateName">
            <summary>
            名称重复失败
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CreateUserRoleStatuses.FailureDuplicateEMail">
            <summary>
            Email重复失败
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CreateUserRoleStatuses.FailureDuplicateIDCard">
            <summary>
            身份证重复失败
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.CreateUserRoleStatuses.FailureUnknowReason">
            <summary>
            其他未知原因失败
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.EarthCoordinates">
            <summary>
            地理坐标
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EarthCoordinates.Lan">
            <summary>
            维度
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EarthCoordinates.Lng">
            <summary>
            经度
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EarthCoordinates.Alt">
            <summary>
            海拔
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.Logics">
            <summary>
            逻辑状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.Logics.False">
            <summary>
            无效（否）
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.Logics.True">
            <summary>
            有效（是）
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.LoginStatuses">
            <summary>
            用户登录的状态
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.Successful">
            <summary>
            登录成功
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureNoAccount">
            <summary>
            登录失败(用户账号(用户名或者EMail)不存在)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureNoName">
            <summary>
            登录失败(用户名不存在)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureNoEMail">
            <summary>
            登录失败(EMail不存在)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureNoIDCard">
            <summary>
            登录失败(IDCard不存在)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureNotMatchPassword">
            <summary>
            登录失败(输入的账号(用户名或者EMail)跟口令不匹配)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureUserDenied">
            <summary>
            登录失败(用户被禁用等原因不允许登录)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.LoginStatuses.FailureUnknowReason">
            <summary>
            登录失败(未知原因)
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.RectangularCoordinates">
            <summary>
            直角坐标
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.NoPermissionControlDisplayModes">
            <summary>
            控件无权使用时的显示模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.NoPermissionControlDisplayModes.Disable">
            <summary>
            显示但不可用
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.NoPermissionControlDisplayModes.Hidden">
            <summary>
            不显示
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.OP.EnumDataSource`1">
            <summary>
              Wrapper a data source object for enumerator <paramref name="EnumType"/>.
            </summary>
            <typeparam name="TEnum">
              The Enum type.
            </typeparam>
            <exception cref="T:System.NotSupportedException"/>
            <example>
            this.comboBox1.DataSource = new EnumDataSource&lt;MyEnum&gt;();
            this.comboBox1.DisplayMember = "DisplayValue";
            this.comboBox1.ValueMember = "Value";
            </example>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumDataSource`1.#ctor">
            <summary>
             Constructor a new <see cref="!:EnumDataSource"/>
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumDataSource`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="displaySerialName"></param>
        </member>
        <member name="T:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter">
            <summary>
             Enum value adapter, used to get values from each Cultures.
            </summary>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter.#ctor(`0)">
            <summary>
            Constructor an <see cref="T:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter"/>.
            </summary>
            <param name="value">The enum value.</param>
            <exception cref="!:">
              
            </exception>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter.#ctor(`0,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="displaySerialName"></param>
        </member>
        <member name="F:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter.enumItemValue">
            <summary>
            Storage the actual Enum value.
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter.displaySerialName">
            <summary>
            在一个枚举项上，可能有多个Attrbute描述（有某种语言的，可能也有其他的），此项指定要显示哪一个
            </summary>
        </member>
        <member name="P:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter.EnumItemValue">
            <summary>
              Gets the actual enum value.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Enums.OP.EnumDataSource`1.EnumAdapter.EnumItemText">
            <summary>
              Gets the display value for enum value by search local resource with currrent UI culture 
              and special key which is concated from Enum type name and Enum value name.
            </summary>
            <remarks>
              This would get correct display value by accessing location resource with current UI Culture.
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute">
            <summary>
            枚举项描述的特性
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute.displaySerialName">
            <summary>
            显示序列的名称
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute.displaySerialValue">
            <summary>
            枚举项的描述
            </summary>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
              Internal constructor.
            </summary>
            <param name="displaySerialName">special <see cref="T:System.Globalization.CultureInfo"/></param>
            <param name="displaySerialValue">the content of Descroption</param>
        </member>
        <member name="P:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute.DisplaySerialName">
            <summary>
              Gets the <see cref="T:System.Globalization.CultureInfo"/> for current decription.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Enums.OP.EnumItemDescriptionAttribute.DisplaySerialValue">
            <summary>
              Gets the description content.
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.OP.EnumBuilder">
            <summary>
            将枚举项构建成选择项的辅助工具类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection``1">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <typeparam name="T">必须为枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection``1(System.String)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <typeparam name="T">必须为枚举类型</typeparam>
            <param name="displaySerialName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection``1(System.Boolean)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <typeparam name="T">必须为枚举类型</typeparam>
            <param name="isDisplayEmptyItem">是否显示空项</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection``1(System.String,System.Boolean)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <typeparam name="T">必须为枚举类型</typeparam>
            <param name="displaySerialName"></param>
            <param name="isDisplayEmptyItem">是否显示空项</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection(System.Type)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <typeparam name="T">必须为枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection(System.Type,System.String)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <param name="enumType">枚举的类型</param>
            <param name="displaySerialName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection(System.Type,System.Boolean)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <param name="enumType">枚举的类型</param>
            <param name="isDisplayEmptyItem">是否显示空项</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Enums.OP.EnumBuilder.BuildItemCollection(System.Type,System.String,System.Boolean)">
            <summary>
            构造枚举项的 列表项集合(即ListItemCollection,列表控件中使用)
            </summary>
            <param name="enumType">枚举的类型</param>
            <param name="displaySerialName"></param>
            <param name="isDisplayEmptyItem">是否显示空项</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Enums.PageDisplayModes">
            <summary>
            页面展示实体信息的方式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PageDisplayModes.Display">
            <summary>
            单纯展示
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PageDisplayModes.Add">
            <summary>
            添加实体
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PageDisplayModes.Edit">
            <summary>
            展示并允许修改
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.PermissionButtonTypes">
            <summary>
            带权限的按钮类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionButtonTypes.Button">
            <summary>
            
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionButtonTypes.HyperLink">
            <summary>
            
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionButtonTypes.LinkButton">
            <summary>
            
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.PermissionTypes">
            <summary>
            权限的类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.View">
            <summary>
            查看
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.New">
            <summary>
            新增
            </summary> 
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Edit">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Orderby">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Print">
            <summary>
            打印
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.A">
            <summary>
            备用A
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.B">
            <summary>
            备用B
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.PermissionSetting">
            <summary>
            权限设置
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom1024">
            <summary>
            自定义权限1024
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom2048">
            <summary>
            自定义权限2048
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom4096">
            <summary>
            自定义权限4096 
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom8192">
            <summary>
            自定义权限8192
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom16384">
            <summary>
            自定义权限16384
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom32768">
            <summary>
            自定义权限32768
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom65536">
            <summary>
            自定义权限65536
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom131072">
            <summary>
            自定义权限131072
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom262144">
            <summary>
            自定义权限262144
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom524288">
            <summary>
            自定义权限524288
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom1048576">
            <summary>
            自定义权限1048576
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom2097152">
            <summary>
            自定义权限2097152
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom4194304">
            <summary>
            自定义权限4194304
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom8388608">
            <summary>
            自定义权限8388608
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom16777216">
            <summary>
            自定义权限16777216
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom33554432">
            <summary>
            自定义权限33554432
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom67108864">
            <summary>
            自定义权限67108864
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom134217728">
            <summary>
            自定义权限134217728
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom268435456">
            <summary>
            自定义权限268435456
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.Custom536870912">
            <summary>
            自定义权限536870912
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.PermissionTypes.ALL">
            <summary>
            所有权限
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.Sexes">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.Sexes.UnSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.Sexes.Male">
            <summary>
            男
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.Sexes.Female">
            <summary>
            女
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.EncryptTypes">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EncryptTypes.UnSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EncryptTypes.NoEncrypt">
            <summary>
            不加密口令
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EncryptTypes.HashEncrypt">
            <summary>
            hash方式加密
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.EncryptTypes.MD5Encrypt">
            <summary>
            MD5方式加密
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.UserTypes">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserTypes.CommonUser">
            <summary>
            普通用户
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserTypes.EnterpriseUser">
            <summary>
            企业用户
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserTypes.Broker">
            <summary>
            代理商用户
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserTypes.Manager">
            <summary>
            一般管理员
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.UserTypes.SuperAdmin">
            <summary>
            超级用户（缺省情况下拥有最高权限）
            </summary>
        </member>
        <member name="T:HiLand.Utility.Enums.WorkKinds">
            <summary>
            工作的性质
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.WorkKinds.AllTimeJob">
            <summary>
            全职
            </summary>
        </member>
        <member name="F:HiLand.Utility.Enums.WorkKinds.PartTimeJob">
            <summary>
            兼职
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:HiLand.Utility.Event.FormatEventHandle`1" -->
        <member name="T:HiLand.Utility.Event.CommonEventHandle`1">
            <summary>
            事件委托（arg 参数无格式的要求）
            </summary>
            <typeparam name="TEventArgs"></typeparam>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:HiLand.Utility.Event.CommonHandle`1">
            <summary>
            普通委托
            </summary>
            <typeparam name="TEventArgs"></typeparam>
            <param name="args"></param>
        </member>
        <member name="P:HiLand.Utility.Event.SearchEventArgs.SelectedSearchKey">
            <summary>
            选定的搜索项
            </summary>
        </member>
        <member name="P:HiLand.Utility.Event.SearchEventArgs.SelectedSearchOperator">
            <summary>
            选定的搜索操作符
            </summary>
        </member>
        <member name="P:HiLand.Utility.Event.SearchEventArgs.SearchValue">
            <summary>
            要搜索的值文本信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Event.SearchEventArgs.SearchExpression">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="T:HiLand.Utility.IO.ContentTypes">
            <summary>
            文件MINE类型
            </summary>
        </member>
        <member name="M:HiLand.Utility.IO.ContentTypes.#cctor">
            <summary>
            静态构建函数
            </summary>
        </member>
        <member name="M:HiLand.Utility.IO.ContentTypes.GetContentType(System.String)">
            <summary>
            根据扩展名获取文件的ContentType信息
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.ContentTypes.LoadDefaultMIME">
            <summary>
            载入缺省的ContentType信息
            </summary>
        </member>
        <member name="M:HiLand.Utility.IO.ContentTypes.LoadOuterMIME">
            <summary>
            其他类型的ContentType可以从外部config中载入
            </summary>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetFileSize(System.String)">
            <summary>
            GetFileSize 获取目标文件的大小
            </summary>       
            <param name="fileFullPath"></param>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetFileEncoding(System.String)">
            <summary>
            获取一个文本文件的编码格式
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
            <remarks>
            文件的字符集在Windows下有两种，一种是ANSI，一种Unicode。
            对于Unicode，Windows支持了它的三种编码方式，一种是小尾编码（Unicode)，一种是大尾编码(BigEndianUnicode)，一种是UTF-8编码。
            我们可以从文件的头部来区分一个文件是属于哪种编码。当头部开始的两个字节为 FF FE时，是Unicode的小尾编码；
            当头部的两个字节为FE FF时，是Unicode的大尾编码；当头部两个字节为EF BB时，是Unicode的UTF-8编码；当它不为这些时，则是ANSI编码。
            按照如上所说，我们可以通过读取文件头的两个字节来判断文件的编码格式，代码如下(C#代码）：
            程序中System.Text.Encoding.Default是指操作系统的当前 ANSI 代码页的编码。
            
            更详细的说明(http://www.cnblogs.com/mgen/archive/2011/07/13/2105649.html)
            UTF-8: EF BB BF
            UTF-16 big endian: FE FF
            UTF-16 little endian: FF FE
            UTF-32 big endian: 00 00 FE FF
            UTF-32 little endian: FF FE 00 00
            </remarks>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetFileShortName(System.String)">
            <summary>
            通过文件的全路径名称获取其不包含路径的文件名称
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetFileMainName(System.String)">
            <summary>
            获取不带扩展信息的文件名称
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetFileExtensionName(System.String)">
            <summary>
            获取文件的扩展名称（带点号）
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GeFileExtensionNameWithoutDot(System.String)">
            <summary>
            获取去不带点号的文件扩展名
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GenerateYearMonthSeperatedFileFullName(System.String,System.String,HiLand.Utility.IO.DatePathFormaters)">
            <summary>
            通过给定的基地址和文件名称，获取文件应该保存的安装年月日期格式话后的目录（年月目录作为基地址的子目录）
            </summary>
            <param name="basePath"></param>
            <param name="fileShortName"></param>
            <param name="datePathFormater"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetFileContent(System.String)">
            <summary>
            读取文本文件的内容
            </summary>       
            <param name="fileFullPath"></param>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.WriteContentToFile(System.String,System.String)">
            <summary>
            将字符串写成文件
            </summary>       
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.ReadFileBytes(System.String)">
            <summary>
            读取文件，返回字节数组
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.WriteBytesToFile(System.String,System.Byte[])">
            <summary>
            将二进制数据写入文件中
            </summary>   
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.WriteBytesToFile(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            将二进制数据写入文件中
            </summary>    
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.SaveBinaryFile(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="objectToSave"></param>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.LoadBinaryFile(System.String)">
            <summary>
            从二进制文件中加载对象
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.GetStreamFromFile(System.String)">
            <summary>
            从文件中获取流
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.WriteStreamToFile(System.IO.Stream,System.String)">
            <summary>
            将流写入到文件中
            </summary>
            <param name="inputStream"></param>
            <param name="fileFullName"></param>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.ConfirmIsOccupied(System.String)">
            <summary>
            确认某文件当前是否在被其他程序打开（或者使用）
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.ConfirmIsOccupied2(System.String)">
            <summary>
            确认某文件当前是否在被其他程序打开（或者使用）
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
            <remarks>判断文件是否被占用的另外一种方式</remarks>
        </member>
        <member name="M:HiLand.Utility.IO.FileHelper.WaitFileUntilFree(System.String)">
            <summary>
            等待文件直到其他程序都已经释放了对它的使用
            </summary>
            <param name="fileFullName"></param>
            <remarks>由于使用了线程等待，此方法最好在在多线程的单独线程中调用，以防止线程阻塞</remarks>
        </member>
        <member name="M:HiLand.Utility.Handler.AuthCodeHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            将验证码图片发送给WEB浏览器
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:HiLand.Utility.Handler.AuthCodeHandler.IsReusable">
            <summary>
            是否可以处理远程的HTTP请求
            </summary>
        </member>
        <member name="T:HiLand.Utility.Handler.UserControlRenderingHandler">
            <summary>
            将用户控件转化成HTML代码的处理程序
            </summary>
            <remarks>
            使用时有一定的格式要求:
            0.更多使用技巧参阅:http://www.cnblogs.com/JeffreyZhao/archive/2008/07/13/user_control_rendering.html
            1.必须给这个handler传递一个control参数(其需要为控件的全名称,即包括路径),其表示要将哪个用户控件生成HTML代码
            2.使用的有两种方式,a.在web.config中配置handler信息.
                                    b.可以创建一个继承于本handler的 ashx文件.
            3.使用的时候,如果要让url中参数能够自动匹配控件内属性,需要在属性上加入以下特性 UserControlRenderingPropertyAttribute,比如
                [UserControlRenderingProperty(Key = "page", Source = UserControlRenderingPropertySource.QueryString)]
                public int PageIndex { get; set; }
                上面这段代码就能保证PageIndex属性自动跟url中的参数page匹配.
            </remarks>
        </member>
        <member name="P:HiLand.Utility.Misc.MenuInfo.MenuText">
            <summary>
            菜单显示的文本
            </summary>
        </member>
        <member name="P:HiLand.Utility.Misc.MenuInfo.MenuFile">
            <summary>
            菜单对应的文件
            </summary>
            <remarks>
            点击菜单是要打开的文件
            </remarks>
        </member>
        <member name="T:HiLand.Utility.Data.RandomHelper">
            <summary>
            随机信息辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Data.RandomHelper.GetRandomString">
            <summary>
            获取随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.RandomHelper.GetRandomString(HiLand.Utility.Enums.CharCategories,System.Int32)">
            <summary>
            获取随机字符串
            </summary>
            <param name="charCount">随机字符串的长度</param>
            <param name="charCategory">字符种类序列</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.RandomHelper.GetUniqueRandomString(HiLand.Utility.Enums.CharCategories,System.Int32,System.Predicate{System.String})">
            <summary>
            根据规则，获取不重复的随机字符串
            </summary>
            <param name="charCount">随机字符串的长度</param>
            <param name="charCategory">字符种类序列</param>
            <param name="uniquePredicate">不重复的规则算法（唯一返回true；否则返回false）</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Data.RandomHelper.GetUniqueRandomString(HiLand.Utility.Enums.CharCategories,System.Int32,System.String,System.Predicate{System.String})">
            <summary>
            根据规则，获取不重复的随机字符串
            </summary>
            <param name="charCount">随机字符串的长度</param>
            <param name="charCategory">字符种类序列</param>
            <param name="prefixer">返回字符串的前缀(其长度不包括在charCount内)</param>
            <param name="uniquePredicate">不重复的规则算法（唯一返回true；否则返回false）</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Module.AntiSQLInjectionModule">
            <summary>
            阻止SQL标本注入的模块
            </summary>
            <remarks>
            1.使用此模块验证SQL注入，需要在web.config中配置节点sqlErrorPage,表示出错后的跳转页面
            2.使用此模块验证SQL注入，需要在web.config中配置节点FilterSqlString,表示要过滤哪些sql关键字
               其格式如下: ‘|[|]|--|declare|exec 即多个关键字之间用|分割
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Module.AntiSQLInjectionModule.Dispose">
            <summary>
            是否资源
            </summary>
        </member>
        <member name="M:HiLand.Utility.Module.AntiSQLInjectionModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:HiLand.Utility.Module.CompressModule">
            <summary>
            处理页面压缩的Module
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:HiLand.Utility.Module.MasterClientResourcePathModule" -->
        <member name="T:HiLand.Utility.Module.SSLSwitchModule">
            <summary>
            根据需求进行http和https之间进行切换的模块
            </summary>
        </member>
        <member name="T:HiLand.Utility.Reflection.ReflectHelper">
            <summary>
            反射技术辅助类
            </summary>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.GetTypeShortDescription``1">
            <summary>
            获取类型带Assembly信息的名称，主要用于反射（其中Assembly名称中不包括版本，语言等信息）
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.GetTypeShortDescription(System.Type)">
            <summary>
            获取类型带Assembly信息的名称，主要用于反射（其中Assembly名称中不包括版本，语言等信息）
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.GetPropertyValue``1(``0,System.String)">
            <summary>
            通过属性名称获取给定对象的属性值（如果在此对象上属性名称不存在，那么返回null）
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="model"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.GetPropertyValue(System.Type,System.Object,System.String)">
            <summary>
            通过属性名称获取给定对象的属性值（如果在此对象上属性名称不存在，那么返回null）
            </summary>
            <param name="modelType"></param>
            <param name="model"></param>
            <param name="propertyName">支持二级属性，比如CurrentBank.AccountNumber
            其会加载属性CurrentBank的子属性AccountNumber的信息</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.GetPropertyValue``2(``0,System.String)">
            <summary>
            通过属性名称获取给定对象的属性值（如果在此对象上属性名称不存在，那么返回null）
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="model"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
            通过属性名称给指定对象的属性赋值
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="model"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.SetPropertyValue``2(``0,System.String,``1)">
            <summary>
            通过属性名称给指定对象的属性赋值
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="model"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            在成员上获取指定的特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="memberInfo">类型的成员信息</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.CopyMemberValue``2(``0,``1)">
            <summary>
            两实体之间相同成员（目前仅包含字段和属性）名称的值复制
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="fromEntity"></param>
            <param name="toEntity"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.CopyMemberValue``2(``0,``1,System.Boolean)">
            <summary>
            两实体之间相同成员（目前仅包含字段和属性）名称的值复制
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="fromEntity"></param>
            <param name="toEntity"></param>
            <param name="isOnlyCopyDeclaredMember">是否仅复制TFrom本身的成员（即不包括TFrom从父类继承的成员）</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Reflection.ReflectHelper.Compare``1(``0,``0,System.Collections.Generic.Dictionary{System.String,HiLand.Utility.Entity.DataForChange{System.String}}@,System.String[])">
            <summary>
            两个对象属性比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceEntity"></param>
            <param name="targetEntity"></param>
            <param name="resultData">属性并更的信息：key为变更的属性名称；value为包含变更前值和后值的数据</param>
            <param name="excludePropertyName">不进行比较的属性名称集合</param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.SSLSwitchConfig.SSLList">
            <summary>
            需要使用SSL的页面信息列表
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.ControlModes">
            <summary>
            SSL对站点页面的控制模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Setting.SectionHandler.ControlModes.OnlyThus">
            <summary>
            仅本部分声明的部分使用ssl,其他部分不使用ssl
            </summary>
        </member>
        <member name="F:HiLand.Utility.Setting.SectionHandler.ControlModes.AllowOther">
            <summary>
            允许其他部分使用ssl(亦可不使用)(缺省)
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.DeployModes">
            <summary>
            部署站点时对页面SSL的模式
            </summary>
        </member>
        <member name="F:HiLand.Utility.Setting.SectionHandler.DeployModes.On">
            <summary>
            来自各个方向的请求使用SSL(缺省)
            </summary>
        </member>
        <member name="F:HiLand.Utility.Setting.SectionHandler.DeployModes.RemoteOnly">
            <summary>
            来自于远程客户的请求使用SSL 网站部署到服务器上使用此属性
            </summary>
        </member>
        <member name="F:HiLand.Utility.Setting.SectionHandler.DeployModes.LocalOnly">
            <summary>
            本地调试时使用
            </summary>
        </member>
        <member name="F:HiLand.Utility.Setting.SectionHandler.DeployModes.Off">
            <summary>
            SSL不可用
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.SSLSwitchHandler">
            <summary>
            获取config节点，创建配置信息实体
            </summary>
            <remarks>
            配置节点section的组成结构如下：
                <sslSwitchPaths ControlMode="AllowOther" DeployMode="On">
                    <file value="~/**/**.aspx"></file>
                    <path value="~/**/"></path>
                </sslSwitchPaths>
                1.sslSwitchPaths中DeployMode的几个值
                    On 来自各个方向的请求使用SSL(缺省)
                    RemoteOnly 来自于远程客户的请求使用SSL 网站部署到服务器上使用此属性
                    LocalOnly 本地调试时使用
                    Off SSL不可用
                2.sslSwitchPaths中ControlMode的几个值
                    OnlyThus 仅本部分声明的部分使用ssl,其他部分不是用ssl
                    AllowOther 允许其他部分使用ssl(亦可不使用)(缺省)
            </remarks>
        </member>
        <member name="T:HiLand.Utility.UI.DDLCommonControl`1">
            <summary>
            通用的下拉列表控件(不可实例化,作为其他枚举列表控件的基类使用)
            </summary>
            <typeparam name="T">T必须为枚举类型</typeparam>
        </member>
        <member name="P:HiLand.Utility.UI.DDLCommonControl`1.DisplayTextCategory">
            <summary>
            显示哪个文本描述类别
            </summary>
        </member>
        <member name="P:HiLand.Utility.UI.DDLCommonControl`1.IsDisplayChoosenItem">
            <summary>
            是否显示"请选择..."选项
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.ClientBrowser.GetClientIP">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="M:HiLand.Utility.Web.ClientBrowser.IsBrowser">
            <summary>
            判断当前访问是否来自浏览器软件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.DownloadHelper.Down(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="origenalFileFullName"></param>
            <param name="clientFileName"></param>
        </member>
        <member name="M:HiLand.Utility.Web.DownloadHelper.Down(System.IO.Stream,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="origenalFileExtesion"></param>
            <param name="clientFileName"></param>
        </member>
        <member name="M:HiLand.Utility.Web.DownloadHelper.TransmitFile(System.String,System.String)">
            <summary>
            文件的直传下载方式
            </summary>
            <param name="origenalFileFullName"></param>
            <param name="clientFileName"></param>
            <remarks>
            微软为Response对象提供了一个新的方法TransmitFile来解决使用Response.BinaryWrite
            下载超过400mb的文件时导致Aspnet_wp.exe进程回收而无法成功下载的问题。
            </remarks>
        </member>
        <member name="P:HiLand.Utility.Paging.PagedEntityCollection`1.Records">
            <summary>
            当前页面上的记录集
            </summary>
        </member>
        <member name="P:HiLand.Utility.Paging.PagedEntityCollection`1.TotalCount">
            <summary>
            总的数量
            </summary>
        </member>
        <member name="P:HiLand.Utility.Paging.PagedEntityCollection`1.PageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:HiLand.Utility.Paging.PagedEntityCollection`1.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:HiLand.Utility.Pattern.Singleton`1">
            <summary>
            通用的单例模式类
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>通过嵌套类，来对线程安全进行保证，具体可参考http://www.yoda.arachsys.com/csharp/singleton.html</remarks>
        </member>
        <member name="M:HiLand.Utility.Pattern.Singleton`1.#cctor">
            <summary>
            
            </summary>
            <remarks>
            此处的静态构建函数能保证属性的延时加载
            </remarks>
        </member>
        <member name="P:HiLand.Utility.Pattern.Singleton`1.Instance">
            <summary>
            具体的单例对象
            </summary>
        </member>
        <member name="T:HiLand.Utility.Resources.Images">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Resources.Images.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Resources.Images.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:HiLand.Utility.Resources.Javascript">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Resources.Javascript.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Resources.Javascript.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HiLand.Utility.Resources.Javascript.CommonJavaScript">
             <summary>
               Looks up a localized string similar to function format(string) {
                var args = arguments;
                var pattern = new RegExp(&quot;{([0-&quot; + arguments.length + &quot;])}&quot;, &quot;g&quot;);
                return String(string).replace(pattern, function (match, index) {
                    var currentIndex = parseInt(index);
                    if (currentIndex + 1 &gt; args.length || currentIndex &lt; 0) {
                        throw new Error(&quot;error args&quot;);
                    }
                    return args[currentIndex + 1];
                });
            };.
             </summary>
        </member>
        <member name="T:HiLand.Utility.Resources.ResourcesManager">
            <summary>
            语言资源管理器
            </summary>
            <remarks>
            其可以管理两种类型的资源:
            1.系统的核心语言资源(其已经嵌入到dll的中)
            2.项目级别(插件级别)的资源文件,其目录必须在web.config中用section"resourcePaths"指定,其格式为:
                <section name="resourcePaths" type="System.Configuration.NameValueSectionHandler"/>
            
                <resourcePaths>
                    <add key="key1" value="~\Resources\resourceTest.xml"></add>
                    <add key="key2" value="~\Resources\resourceTest2.xml"></add>
                    ...
                </resourcePaths>
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Resources.ResourcesManager.LoadCoreResource(System.String)">
            <summary>
            载入系统核心的语言资源(其在dll的嵌入资源中)
            </summary>
            <param name="cultureInfoString"></param>
        </member>
        <member name="M:HiLand.Utility.Resources.ResourcesManager.LoadAppResource(System.String)">
            <summary>
            载入系统(插件)级的语言资源(其通过配置文件指定了存放的文件夹位置)
            </summary>
            <param name="resourceFile"></param>
        </member>
        <member name="M:HiLand.Utility.Resources.ResourcesManager.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Resources.ResourcesManager.GetResourceWebUrl(System.String)">
            <summary>
            获取嵌入资源的web路径
            </summary>
            <param name="resourceFileName"></param>
            <returns>
            注:这个资源必须在命名空间上使用 assembly: WebResource() 进行注册(或者在 AssemblyInfo.cs 文件中配置 assembly:WebResource 程序集属性),才可以使用
            </returns>
        </member>
        <member name="P:HiLand.Utility.Resources.ResourcesManager.Resource">
            <summary>
            所有的语言资源信息
            </summary>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.SHA1(System.String)">
            <summary>
            SHA1加密字符串
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.MD5(System.String)">
            <summary>
            MD5加密字符串
            </summary>
            <param name="originalString"></param>
            <returns></returns>
            <remarks>
            MD5的全称是message-digest algorithm 5（信息-摘要算法），
            在90年代初由mit laboratory for computer science和
            rsa data security inc的ronald l. rivest开发出来， 经md2、md3和md4发展而来。
            它的作用是让大容量信息在用数字签名软件签署私人密匙前被"压缩"成一种保密的格式
            （就是把一个任意长度的字节串变换成一定长的大整数）。
            不管是md2、md4还是md5，它们都需要获得一个随机长度的信息并产生一个128位的信息摘要。
            虽然这些算法的结构或多或少有些相似，但md2的设计与md4和md5完全不同，
            那是因为md2是为8位机器做过设计优化的，而md4和md5却是面向32位的电脑。
            这三个算法的描述和c语言源代码在internet rfcs 1321中有详细的描述
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.AESEncrypt(System.Byte[],System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="originalData">被加密的明文</param>
            <param name="key">密钥</param>
            <param name="vector">向量</param>
            <returns>密文</returns>
            <remarks>
            AES算法描述简介：
            DES数据加密标准算法由于密钥长度较小(56位),
            已经不适应当今分布式开放网络对数据加密安全性的要求，
            因此1997年NIST公开征集新的数据加密标准,即AES。
            经过三轮的筛选,比利时Joan Daeman和Vincent Rijmen
            提交的Rijndael算法被提议为AES的最终算法。
            此算法将成为美国新的数据加密标准而被广泛应用在各个领域中。
            尽管人们对AES还有不同的看法,但总体来说,
            AES作为新一代的数据加密标准汇聚了强安全性、高性能、高效率、易用和灵活等优点。
            AES设计有三个密钥长度:128,192,256位，
            相对而言，AES的128密钥比DES的56密钥强1021倍。
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.AESDecrypt(System.Byte[],System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="encryptedData">被解密的密文</param>
            <param name="key">密钥</param>
            <param name="vector">向量</param>
            <returns>明文</returns>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.DESEncrypt(System.String,System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="originalString">待加密的字符串</param>
            <param name="key">加密密钥</param>
            <param name="vector"></param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.DESDecrypt(System.String,System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="encryptedString">待解密的字符串</param>
            <param name="key">解密密钥,要求为8位,和加密密钥相同</param>
            <param name="vector"></param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA Encrypt
            </summary>
            <param name="sourceString" >Source string</param>
            <param name="publicKey" >public key</param>
            <returns>
            RSA 属不对称加密，使用一个公钥一个私钥，公钥可以公开用以加密，
            私钥严格保密用于解密，RSA 适合于数据量不大的加密，比如加密对称加密的密钥。
            RSA 实际应用中是：接收方产生公钥和私钥，发送方用其公钥加密，再把加密后的内容发送给接收方。
            </returns>
        </member>
        <member name="M:HiLand.Utility.Security.EncryptService.RSADecrypt(System.String,System.String)">
            <summary>
            RSA Decrypt
            </summary>
            <param name="sourceString">Source string</param>
            <param name="privateKey">Private Key</param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Serialization.ExtentiblePropertyRepository">
            <summary>
            可扩展属性的库
            </summary>
            <remarks>
            此库内可以有多个NameValueCollection（用字典表示，缺省情形下我们使用缺省的一个就可以了）；每个NameValueCollection内都可以记录多个属性的名字和值。
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="keys"></param>
            <param name="values"></param>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.#ctor(HiLand.Utility.Serialization.SerializerData)">
            <summary>
            构造函数
            </summary>
            <param name="serializerData"></param>
        </member>
        <member name="F:HiLand.Utility.Serialization.ExtentiblePropertyRepository.isParserd">
            <summary>
            传递进来的（用逗号分隔的字符串集合类型的）名称和值是否解析进入NameValueCollection内。
            （为了提高系统的性能，扩展属性部分采用了延迟加载，即有请求才加载。本字段标明扩展属性是否经过解析和加载）
            </summary>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetExtentibleProperty(System.String)">
            <summary>
            获取可扩展属性的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetExtentibleProperty(System.String,System.String)">
            <summary>
            获取可扩展属性的值
            </summary>
            <param name="settingName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.SetExtentibleProperty(System.String,System.String)">
            <summary>
            设置可扩展属性的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.SetExtentibleProperty(System.String,System.String,System.String)">
            <summary>
            设置可扩展属性的值
            </summary>
            <param name="settingName"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetExtentiblePropertyCount">
            <summary>
            获取可扩展属性的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetExtentiblePropertyCount(System.String)">
            <summary>
            获取可扩展属性的数量
            </summary>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetExtentibleProperty``1(System.String)">
            <summary>
            获取可扩展属性的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetExtentibleProperty``1(System.String,System.String)">
            <summary>
            获取可扩展属性的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settingName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.GetOrAddNVC(System.String)">
            <summary>
            获取指定的NameValueCollection(如果字典中不存在此NVC，则同时创建)
            </summary>
            <param name="settingName">NameValueCollection的名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.PushSerializerData(HiLand.Utility.Serialization.SerializerData)">
            <summary>
            将一个序列化数据集写入“库”中
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:HiLand.Utility.Serialization.ExtentiblePropertyRepository.PushSerializerData(System.String,HiLand.Utility.Serialization.SerializerData)">
            <summary>
            将一个序列化数据集写入“库”中
            </summary>
            <param name="settingName">序列化数据集在库中的名字</param>
            <param name="data"></param>
        </member>
        <member name="T:HiLand.Utility.Serialization.Serializer">
            <summary>
            Summary description for Serializer.
            </summary>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.#cctor">
            <summary>
            Static Constructor is used to set the CanBinarySerialize value only once for the given security policy
            </summary>
        </member>
        <member name="F:HiLand.Utility.Serialization.Serializer.CanBinarySerialize">
            <summary>
            Readonly value indicating if Binary Serialization (using BinaryFormatter) is allowed
            </summary>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToBytes(System.Object)">
            <summary>
            Converts a .NET object to a byte array. Before the conversion happens, a check with 
            Serializer.CanBinarySerialize will be made
            </summary>
            <param name="objectToConvert">Object to convert</param>
            <returns>A byte arry representing the object paramter. Null will be return if CanBinarySerialize is false</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.SaveFileAsBinary(System.Object,System.String)">
            <summary>
            Saves an object to disk as a binary file. 
            </summary>
            <param name="objectToSave">Object to Save</param>
            <param name="fileFullName">Location of the file</param>
            <returns>true if the save was succesful.</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToObject(System.Byte[])">
            <summary>
            Converts a byte array to a .NET object. You will need to cast this object back to its expected type. 
            If the array is null or empty, it will return null.
            </summary>
            <param name="byteArray">An array of bytes represeting a .NET object</param>
            <returns>The byte array converted to an object or null if the value of byteArray is null or empty</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToObject``1(System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertBinaryFileToObject(System.String)">
            <summary>
            转换二进制文件为对象
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertBinaryFileToObject``1(System.String)">
            <summary>
            转换二进制文件为对象
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToXmlString(System.Object)">
            <summary>
            Converts a .NET object to a string of XML. The object must be marked as Serializable or an exception
            will be thrown.
            </summary>
            <param name="objectToConvert">Object to convert</param>
            <returns>A xml string represting the object parameter. The return value will be null of the object is null</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.SaveFileAsXML(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="objectToConvert"></param>
            <param name="fileFullName"></param>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertXmlFileToObject``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertXmlToObject``1(System.String)">
            <summary>
            Converts a string of xml to the supplied object type. 
            </summary>
            <param name="xmlValue">Xml representing a .NET object</param>
            <param name="objectType">The type of object which the xml represents</param>
            <returns>A instance of object or null if the value of xml is null or empty</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertXmlToObject``1(System.Xml.XmlNode)">
            <summary>
            Converts a string of xml to the supplied object type. 
            </summary>
            <param name="xml">Xml representing a .NET object</param>
            <param name="objectType">The type of object which the xml represents</param>
            <returns>A instance of object or null if the value of xml is null or empty</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.SaveFileAsJSON(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="objectToConvert"></param>
            <param name="fileFullName"></param>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertJSONToObject``1(System.String)">
            <summary>
            Converts a string of json to the supplied object type. 
            </summary>
            <param name="xmlValue">Xml representing a .NET object</param>
            <param name="objectType">The type of object which the xml represents</param>
            <returns>A instance of object or null if the value of xml is null or empty</returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertJSONFileToObject``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToNameValueCollection(HiLand.Utility.Serialization.SerializerData)">
            <summary>
            Creates a NameValueCollection from two string. The first contains the key pattern and the second contains the values
            spaced according to the kys
            </summary>
            <param name="serializerData"></param>
            <returns>A NVC populated based on the keys and vaules</returns>
            <example>
            string keys = "key1:S:0:3:key2:S:3:2:";
            string values = "12345";
            This would result in a NameValueCollection with two keys (Key1 and Key2) with the values 123 and 45
            </example>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToNameValueCollection(System.String,System.String)">
            <summary>
            Creates a NameValueCollection from two string. The first contains the key pattern and the second contains the values
            spaced according to the kys
            </summary>
            <param name="keys">Keys for the namevalue collection</param>
            <param name="values">Values for the namevalue collection</param>
            <returns>A NVC populated based on the keys and vaules</returns>
            <example>
            string keys = "key1:S:0:3:key2:S:3:2:";
            string values = "12345";
            This would result in a NameValueCollection with two keys (Key1 and Key2) with the values 123 and 45
            </example>
        </member>
        <member name="M:HiLand.Utility.Serialization.Serializer.ConvertToSerializerData(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a the keys and values strings for the simple serialization based on a NameValueCollection
            </summary>
            <param name="nvc">NameValueCollection to convert</param>
            <param name="keys">the ref string will contain the keys based on the key format</param>
            <param name="values">the ref string will contain all the values of the namevaluecollection</param>
        </member>
        <member name="T:HiLand.Utility.Serialization.SerializerData">
            <summary>
            Container for get/set data from the CS datastore
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.Config">
            <summary>
            config配置文件读取工具
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetConnectionString(System.String)">
            <summary>
            获取某个指定名称的数据库连接字符串
            </summary>
            <param name="connectionStringName">连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSetting(System.String)">
            <summary>
            读取配置节点
            </summary>
            <param name="settingName">配置节点名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSetting(System.String,System.String)">
            <summary>
            读取配置节点
            </summary>
            <param name="settingName">配置节点名称</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSettingInt(System.String)">
            <summary>
            读取Int类型的配置节点
            </summary>
            <param name="settingName">配置节点名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSettingInt(System.String,System.Int32)">
            <summary>
            读取Int类型的配置节点
            </summary>
            <param name="settingName">配置节点名称</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSettingBool(System.String)">
            <summary>
             读取Bool类型的配置节点
            </summary>
            <param name="settingName">配置节点名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSettingBool(System.String,System.Boolean)">
            <summary>
            读取Bool类型的配置节点
            </summary>
            <param name="settingName">配置节点名称</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSetting``1(System.String)">
            <summary>
            读取配置节点的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetAppSetting``1(System.String,``0)">
            <summary>
            读取配置节点的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settingName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Setting.Config.GetSection``1(System.String)">
            <summary>
            获取配置节信息
            </summary>
            <typeparam name="T">配置节对应的数据类型</typeparam>
            <param name="sectionName">配置节的名称</param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Setting.Config.ConnectionString">
            <summary>
            获取缺省的数据库连接字符串
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.Config.IsRecordOperateLog">
            <summary>
            是否记录操作日志
            </summary>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.GeneralValidateConfig.OptimizeStrcture(HiLand.Utility.Setting.SectionHandler.GeneralValidateConfig)">
            <summary>
            优化GeneralValidateConfig存储结构
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateApplication.Guid">
            <summary>
            Guid信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateApplication.Name">
            <summary>
            名称信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateModule.Guid">
            <summary>
            Guid信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateModule.Name">
            <summary>
            名称信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateSubModule.Guid">
            <summary>
            Guid信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateSubModule.Name">
            <summary>
            名称信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateOperation.OperationValue">
            <summary>
            功能操作的值
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateOperation.OperationName">
            <summary>
            功能操作的名称
            </summary>
            <remarks>通常是几个固定的枚举值，比如Add，Edit等</remarks>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.GeneralValidateOperation.OperationText">
            <summary>
            功能操作显示的文本
            </summary>
            <remarks>比如将Add显示为添加，将Edit显示为修改等</remarks>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.GeneralValidateSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            获取config节点，创建配置信息实体
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PathRoleValidateEntity.PathToValidate">
            <summary>
            需要验证的目录
            </summary>
        </member>
        <member name="P:HiLand.Utility.Setting.SectionHandler.PathRoleValidateEntity.RolesToValidate">
            <summary>
            需要验证的角色
            </summary>
        </member>
        <member name="T:HiLand.Utility.Setting.SectionHandler.PathRoleValidateSectionHandler">
            <summary>
            读取站点验证配置节点section的处理程序
            </summary>
            <remarks>
            验证配置节点section的组成结构如下：
                <pathRoleValidate >
                    <validate path="CheckDirAdmin">
                        <role name="admin"></role>
                        <role name="manager"></role>
                    </validate>
                    <validate path="CheckDirRole">
                        <role name="admin"></role>
                        <role name="otherRole"></role>
                    </validate>
                </pathRoleValidate>
                说明：
                1.本验证功能是按照角色目录对照进行验证（即某个角色是否可以访问某个目录）
                2.如果有多个目录需要验证，就在节点pathRoleValidate内添加多个子节点validate（每个validate可以验证一个目录）
                3.那些角色能访问本目录就在节点validate内创建子节点role（每个role表示一个角色可以访问本目录）
                4.如果运行多个角色访问一个目录，那么就在节点validate内添加多个子节点role
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Setting.SectionHandler.PathRoleValidateSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            获取config节点，创建配置信息实体
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.UI.AuthCode">
            <summary>
            验证码控件
            </summary>
            <remarks>
            本验证控件要跟AuthCodeHandler一起使用，关于AuthCodeHandler在web.config中的配置，请使用如下格式：
                <httpHandlers>
                    <add path="*.authcode" verb="*" type="HiLand.Utility.Handler.AuthCodeHandler,HiLand.Utility"/>
                </httpHandlers>
            </remarks>
        </member>
        <member name="M:HiLand.Utility.UI.AuthCode.GetAuthCodeValue">
            <summary>
            获得验证码的值
            </summary>
            <returns>验证码</returns>
        </member>
        <member name="P:HiLand.Utility.UI.AuthCode.AuthCodeValue">
            <summary>
            获得验证码的值
            </summary>
        </member>
        <member name="T:HiLand.Utility.UI.CCommonSearch">
            <summary>
            这个通用搜索功能需要继续完成，目前项目使用Web项目中的UCommonSearch控件
            </summary>
        </member>
        <member name="M:HiLand.Utility.UI.MessageBox.Show(System.String)">
            <summary>
            显示提示信息
            </summary>
            <param name="message">显示提示信息内容</param>
        </member>
        <member name="M:HiLand.Utility.UI.MessageBox.Show(System.Web.UI.Page,System.String)">
            <summary>
            显示提示信息
            </summary>
            <param name="page">调用页面</param>
            <param name="message">显示提示信息内容</param>
        </member>
        <member name="M:HiLand.Utility.UI.MessageBox.ShowAndRedirect(System.String,System.String)">
            <summary>
            显示提示信息并且跳转页面
            </summary>
            <param name="message">显示提示信息内容</param>
            <param name="url">跳转的页面地址</param>
        </member>
        <member name="M:HiLand.Utility.UI.MessageBox.ShowAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示提示信息并且跳转页面
            </summary>
            <param name="page">调用页面</param>
            <param name="message">显示提示信息内容</param>
            <param name="url">跳转的页面地址</param>
        </member>
        <member name="M:HiLand.Utility.UI.MessageBox.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击 消息确认提示框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="message">提示信息</param>
        </member>
        <member name="T:HiLand.Utility.UI.UserControlViewManager`1">
            <summary>
            获取User Control生成的HTML代码
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            ViewManager中只有两个方法：LoadViewControl和RenderView。
            LoadViewControl方法的作用是创建一个 Control实例并返回，RenderView方法的作用则就是生成HTML了。
            这个实现方式的技巧在于使用了一个新建的Page对象作为生成控件的 “容器”，
            而最后其实我们是将Page对象的整个生命周期运行一遍，并且将结果输出。
            由于这个空的Page对象不会产生任何其他代码，因此我们得到的，就是用户控件生成的代码了。
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.ClientPage.ClearClientPageCache">
            <summary>
            清空客户端页面缓存
            </summary>
        </member>
        <member name="T:HiLand.Utility.Web.CookieInfo">
            <summary>
            Cookies基类。将需要保存Cookies的数据类此类派生，可以将强类型对象在Cookies中的保存和读取。
            </summary>
            <remarks>
            2009.8.6    ziqiu.zhang     created
            保存数据的派生类中的属性，最好仅使用string，int类型；复杂类型不推荐使用（有可能会出现问题）
            </remarks>
        </member>
        <member name="M:HiLand.Utility.Web.CookieInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.CookieInfo.GetExpiresTime">
            <summary>
            得到当前Cookies的过期时间
            </summary>
            <returns>过期时间</returns>
        </member>
        <member name="M:HiLand.Utility.Web.CookieInfo.Save">
            <summary>
            保存Cookies，过期时间为浏览器关闭则失效。
            </summary>
            <param name="expiresTime">Cookies过期事件</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:HiLand.Utility.Web.CookieInfo.Save(System.DateTime)">
            <summary>
            保存Cookies，需要指定过期时间。
            </summary>
            <param name="expiresTime">Cookies过期事件</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:HiLand.Utility.Web.CookieInfo.Load">
            <summary>
            找回Cookie值
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.CookieInfo.Load``1">
            <summary>
            构造Cookie对象并载入其值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Web.ResponseHelper">
            <summary>
            响应对象帮助器
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.ResponseHelper.SetNoCache">
            <summary>
            禁用客户端缓存
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.ResponseHelper.SetNoCache(System.Web.HttpResponse)">
            <summary>
            禁用客户端缓存
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.ResponseHelper.RedirectPage(System.String)">
            <summary>
            跳转页面，同时将跳转前的页面作为返回参数进行传递
            </summary>
            <param name="targetUrl">跳转的目标页面</param>
        </member>
        <member name="P:HiLand.Utility.Web.ResponseHelper.CurrentResponse">
            <summary>
            当前的响应信息
            </summary>
        </member>
        <member name="M:HiLand.Utility.Web.SessionHelper.GetSession``1(System.String)">
            <summary>
            获取指定Session值
            </summary>
            <param name="sessionName">Session的名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.SessionHelper.GetSession(System.String)">
            <summary>
            获取指定Session值
            </summary>
            <param name="sessionName">Session的名称</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.SessionHelper.SetSession``1(System.String,``0)">
            <summary>
            给指定的名称设置Session的值
            </summary>
            <param name="sessionName"></param>
            <param name="sessionValue"></param>
        </member>
        <member name="M:HiLand.Utility.Web.SessionHelper.GetSessionID">
            <summary>
            获取当前请求用户的SessionID
            </summary>
            <returns></returns>
        </member>
        <member name="T:HiLand.Utility.Web.UrlInfo">
            <summary>
            对Url的参数进行拼接
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:HiLand.Utility.Web.UrlInfo.isOnlyUseAndConcat" -->
        <member name="M:HiLand.Utility.Web.UrlInfo.#ctor(System.String)">
            <summary>
            构建函数
            </summary>
            <param name="inputUrl">传入的地址</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HiLand.Utility.Web.UrlInfo.#ctor(System.Boolean)" -->
        <member name="M:HiLand.Utility.Web.UrlInfo.Concat(System.String,System.String)">
            <summary>
            参数拼接
            </summary>
            <param name="key">参数key</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.UrlInfo.ToString">
            <summary>
            获取拼接后的地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.UrlInfo.ToString(System.Boolean)">
            <summary>
            获取拼接后的地址
            </summary>
            <param name="isAppendRandom"></param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.UrlInfo.New(System.String)">
            <summary>
            静态实例方法
            </summary>
            <param name="basicUrl">url基地址</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HiLand.Utility.Web.UrlInfo.New(System.Boolean)" -->
        <member name="M:HiLand.Utility.Web.WebHelper.GetRelativeVirtualPath(System.String)">
            <summary>
            将普通的虚拟目录转化成应用程序的虚拟目录（以“~/”开头格式的目录）
            </summary>
            <param name="virtualPath">普通文件的虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.WebHelper.GetAbsolutePath(System.String)">
            <summary>
            获取绝对目录
            </summary>
            <param name="virtualPath">文件的虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.WebHelper.GetPhysicalPath(System.String)">
            <summary>
            获取虚拟路径对应的物理路径
            </summary>
            <param name="virtualPath">文件的虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.WebHelper.MapPath(System.String)">
            <summary>
            获取虚拟路径对应的物理路径
            </summary>
            <param name="virtualPath">文件的虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:HiLand.Utility.Web.WebHelper.GetClientIP">
            <summary>
            获得用户IP
            </summary>
        </member>
        <member name="P:HiLand.Utility.Web.WebHelper.Server">
            <summary>
            当前请求对应的Server信息
            </summary>
        </member>
        <member name="P:HiLand.Utility.Web.WebHelper.IsSelfServer">
            <summary>
            是否为本机服务器
            </summary>
            <returns></returns>
            <remarks>
                当前请求的服务是否位于本机上（主要针对开发人员的授权时使用）
            </remarks>
        </member>
        <member name="P:HiLand.Utility.Web.WebHelper.IsLocalServer">
            <summary>
            是否为本地服务器
            </summary>
            <returns></returns>
            <remarks>
                本机服务器，局域网内的服务器均为本地服务器
                局域网可用的ip地址范围为:
                    A类地址10.0.0.0 - 10.255.255.255
                    b类网172.16.0.0 - 172.31.255.255
                    c类网192.168.0.0 -192.168.255.255
            </remarks>
        </member>
        <member name="P:HiLand.Utility.Web.WebHelper.IsRemoteServer">
            <summary>
            是否为远程服务器
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
